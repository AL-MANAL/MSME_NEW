@model ISOStd.Models.DocumentTrackingModels

@{
    ViewBag.Title = "ADDQHSEPlanner";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

@section featured {

    <div class="page-header page-header-light">

        <div class="page-header-content header-elements-md-inline">
            <div class="page-title d-flex">
                <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>

            </div>


        </div>

        <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
            <div class="d-flex">
                <div class="breadcrumb">

                    <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item"> Home</span>
                    </a>
                    <a href="@Url.Action("DocTrackingList", "DocumentTracking", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item">Internal Document Status Tracking</span>
                    </a>
                    <span class="breadcrumb-item active">Add Internal Document Status Tracking</span>
                </div>

                <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
            </div>

            @*<div class="header-elements d-none">
                <div class="breadcrumb justify-content-center">


                    <div class="breadcrumb-elements-item dropdown p-0">
                        <a href="#" class="breadcrumb-elements-item dropdown-toggle" data-toggle="dropdown">
                            <i class="icon-gear mr-2"></i>
                            Settings
                        </a>

                        <div class="dropdown-menu dropdown-menu-right">

                            <div class="dropdown-divider"></div>
                            <a href="#" class="dropdown-item"><i class="icon-gear"></i> All settings</a>
                        </div>
                    </div>
                </div>
            </div>*@
        </div>
    </div>
    
}

@using (Html.BeginForm("AddDocTracking", "DocumentTracking", FormMethod.Post,
                     new { enctype = "multipart/form-data", id = "form1", name = "form1" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-header header-elements-inline bg-primary">
            <h5 class="card-title">Add Internal Document Status Tracking</h5>
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="container-fluid">
                <table class="table table-lg">
                    <tbody>
                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                @Html.LabelFor(model => model.branch)
                            </td>
                            <td class="col-xs-6 col-md-4">
                                <select class="form-control select-fixed-multiple" multiple="multiple" data-fouc id="branch" name="branch" onchange="GetDeptList()">
                                    @*<option value='' hidden>Select</option>*@
                                    @if (ViewBag.Branch != null)
                                    {
                                        foreach (var data in ViewBag.Branch)
                                        {
                                            if (Array.IndexOf(Model.branch.ToString().Split(','), data.Value) >= 0)
                                            {
                                                <option value='@data.Value' selected>@data.Text</option>
                                            }
                                            else
                                            {
                                                <option value='@data.Value'>@data.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                <span class="field-validation-error"><label id="branch-message" class="validation-invalid-label" style="display:none" for="basic">This field is required.</label> </span>
                            </td>
                        </tr>
                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                @Html.LabelFor(model => model.Department)<text style="color:red;">*</text>
                            </td>
                            <td class="col">
                                <select class="form-control select-fixed-multiple" data-fouc id="Department" name="Department" multiple="multiple" @*onchange="GetEmpList()"*@>
                                    @if (ViewBag.Department != null)
                                    {
                                        foreach (var item in ViewBag.Department)
                                        {
                                            if (Array.IndexOf(Model.Department.ToString().Split(','), item.Value) >= 0)
                                            {
                                                <option value='@item.Value' selected>@item.Text</option>
                                            }
                                            else
                                            {
                                                <option value='@item.Value'>@item.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                <span class="field-validation-error"><label id="Department-message" class="validation-invalid-label" style="display:none" for="basic">This field is required.</label> </span>

                            </td>

                            <td class="col-xs-3 col-md-2">
                                @Html.LabelFor(model => model.Location)<text style="color:red;">*</text>
                            </td>
                            <td class="col">
                                <select class="form-control select-fixed-multiple" data-fouc id="Location" name="Location" multiple="multiple" @*onchange="GetEmpList()"*@>
                                    @if (ViewBag.Location != null)
                                    {
                                        foreach (var item in ViewBag.Location)
                                        {
                                            if (Array.IndexOf(Model.Location.ToString().Split(','), item.Value) >= 0)
                                            {
                                                <option value='@item.Value' selected>@item.Text</option>
                                            }
                                            else
                                            {
                                                <option value='@item.Value'>@item.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                <span class="field-validation-error"><label id="Location-message" class="validation-invalid-label" style="display:none" for="basic">This field is required.</label> </span>
                            </td>
                        </tr>
                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.doctype)<text style="color: red;">*</text>
                                </div>
                            </td>
                            <td class="col">
                                <div class="editor-field">
                                    <select class="form-control select-search select2-hidden-accessible" data-fouc id="doctype" name="doctype">
                                        <option value='' hidden>Select</option>
                                        @if (ViewBag.DocType != null)
                                        {
                                            foreach (var item in ViewBag.DocType)
                                            {
                                                <option value='@item.Value'>@item.Text</option>
                                            }
                                        }
                                    </select>
                                    <span class="field-validation-error"><label id="doctype-message" class="validation-invalid-label" style="display:none" for="basic">This field is required.</label> </span>
                                </div>
                            </td>
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.docname)<text style="color: red;">*</text>
                                </div>
                            </td>
                            <td class="col">
                                <div class="editor-field">
                                    <input type="text" id="docname" name="docname" class="form-control" />
                                    <span class="field-validation-error"><label id="docname-message" class="validation-invalid-label" style="display:none" for="basic">This field is required.</label> </span>
                                </div>
                            </td>
                        </tr>
                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.issue_autority)
                                </div>
                            </td>
                            <td class="col">
                                <div class="editor-field">
                                    <input type="text" id="issue_autority" name="issue_autority" class="form-control" />
                                    @*<span class="field-validation-error"><span id="issue_autority-message" style="display: none;">Autority person is required.</span></span>
                    @Html.ValidationMessageFor(model => model.issue_autority)*@

                                </div>
                            </td>
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.NotificationPerson)<text style="color: red;">*</text>
                                </div>
                            </td>
                            <td class="col">
                                <div class="editor-field">
                                    <select class="form-control select-fixed-multiple" multiple="multiple" data-fouc id="NotificationPerson" name="NotificationPerson">
                                        @if (ViewBag.EmpList != null)
                                        {
                                            foreach (var item in ViewBag.EmpList)
                                            {
                                                <option value='@item.Value'>@item.Text</option>
                                            }
                                        }
                                    </select>

                                    <span class="field-validation-error"><label id="NotificationPerson-message" class="validation-invalid-label" style="display:none" for="basic">Notification Person field is required.</label> </span>
                                </div>
                            </td>
                        </tr>
                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.issue_date)<text style="color: red;">*</text>
                                </div>
                            </td>
                            <td class="col">
                                <div class="editor-field">
                                    <input type="date" id="issue_date" name="issue_date" class="form-control" />
                                    <span class="field-validation-error"><label id="issue_date-message" class="validation-invalid-label" style="display:none" for="basic">Issue date field is required.</label> </span>
                                </div>
                            </td>
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.exp_date)<text style="color: red;">*</text>
                                </div>
                            </td>
                            <td class="col">
                                <div class="editor-field">
                                    <input type="date" id="exp_date" name="exp_date" class="form-control" onchange="checkDate();" />
                                    <span class="field-validation-error"><label id="exp_date-message" class="validation-invalid-label" style="display:none" for="basic">Expiration date field is required.</label> </span>
                                </div>
                            </td>
                        </tr>

                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.upload)<text style="color: red;">*</text>
                                </div>
                            </td>
                            <td class="col">
                                <input type="file" name="upload" id="upload" multiple="multiple" title="Action Plan" onchange="FileFormatValidation(this)" accept=".pdf, .doc, .docx,image/*"
                                       class="bootstrap-uploader" data-fouc />
                                <span class="form-text text-muted"><code>(Hold Ctrl Key in case of multiple files or drag multiple files and drop here)</code></span>
                                <span class="field-validation-error"><label id="upload-message" class="validation-invalid-label" style="display:none" for="basic">Upload field is required.</label> </span>
                            </td>

                            <td class="col-xs-3 col-md-2">

                                @Html.LabelFor(model => model.NotificationPeriod)

                            </td>
                            <td class="col">

                                <div class="form-group form-group-float">
                                    <select class="form-control select-search select2-hidden-accessible" data-fouc id="NotificationPeriod" name="NotificationPeriod">
                                        @if (ViewBag.NotificationPeriod != null)
                                        {
                                            foreach (var item in ViewBag.NotificationPeriod)
                                            {
                                                <option value='@item.Key'>@item.Value</option>
                                            }
                                        }
                                    </select>

                                </div>
                                <div class="form-group form-group-float">
                                    <input class="form-control" type="number" id="NotificationValue" name="NotificationValue" value="0" max="3" />

                                    <span class="form-text text-muted"><code>(Alert on or before Expiry date)</code></span>


                                </div>
                            </td>
                        </tr>

</table>
            </div>
        </div>

        <div class="card-footer bg-white d-flex justify-content-between align-items-center">
            @Html.ActionLink("Back to List", "DocTrackingList", null, new { @class = "btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400", onclick = "HyperLinkProgressIconFunction()" })


            <div class="mt-2 mt-sm-0">
                <button type="submit" id="btnCreate" value="Save" class="btn bg-indigo-400 invisible" onclick="ProgressIconFunction('#form1')"><i class="icon-checkmark3 mr-2"></i> Save</button>
                <input type="button" value="Add" class="btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400" onclick="AddDocument()" />
            </div>
        </div>
    </div>


    <div class="card invisible" id="hidden card">
        <div class="card-header header-elements-inline">
            <h5 class="card-title">Document Tracking</h5>
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                    <a class="list-icons-item" data-action="remove"></a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <input type="hidden" id="itemcnt" name="itemcnt" value="0" />


            <div class="card card-table table-responsive shadow-0 mb-0">
                <table class="table" id="team-list">
                    <tr class="bg-blue">
                        <th>Action</th>
                        <th>Branch</th>
                        <th>Department</th>
                        <th>Location</th>
                        <th>Document Type</th>
                        <th>Document Name</th>
                        <th>Issue Date</th>
                        <th>Expiry Date</th>
                        <th>Issue Authority</th>
                        <th>Notification Person</th>
                        <th>Upload</th>
                        <th>Notification Period</th>
                        <th>Notification Value</th>
                    </tr>
                </table>
            </div>


        </div>
    </div>
}
@section Scripts {
    <script>
                //----zzz

 $(document).ready(function () {

        @if (TempData["alertdata"] != null)
        {

            @: new Noty({
            @:     text: '@TempData["alertdata"]',
            @:     type: 'error'
            @: }).show();
        }

        @if (@TempData["Successdata"] != null)
        {

            @:    new Noty({
            @:       text: '@TempData["Successdata"]',
            @:       type: 'success'
            @:   }).show();
        }
        });

    //zzz----


        function FileFormatValidation(file) {
            var ext = file.value.split(".").pop().toLowerCase();
            if ($.inArray(ext, ["pdf", "xlsx", "xls", "doc", "docx"]) == -1) {
                file.value = "";
                bootbox.alert({
                    title: 'File type',
                    message: 'Invalid file format, please upload only doc, pdf, xlsx, xls, docx format'
                });
            }
        }

                var showClass = 'is-visible';
                var hideClass = 'invisible';
        function Validation() {
            var validflg = true;
            var ssnMessage = "";
            if (document.getElementById("doctype").value == "") {
                ssnMessage = $('#doctype-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#doctype-message');
                ssnMessage.hide();
            }
            if (document.getElementById("branch").value == "") {
                ssnMessage = $('#branch-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#branch-message');
                ssnMessage.hide();
            }
            if (document.getElementById("Location").value == "") {
                ssnMessage = $('#Location-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#Location-message');
                ssnMessage.hide();
            }
            if (document.getElementById("Department").value == "") {
                ssnMessage = $('#Department-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#Department-message');
                ssnMessage.hide();
            }
            if (document.getElementById("docname").value == "") {
                ssnMessage = $('#docname-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#docname-message');
                ssnMessage.hide();
            }
            if (document.getElementById("issue_date").value == "") {
                ssnMessage = $('#issue_date-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#issue_date-message');
                ssnMessage.hide();
            }
            if (document.getElementById("exp_date").value == "") {
                ssnMessage = $('#exp_date-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#exp_date-message');
                ssnMessage.hide();
            }
            if (document.getElementById("upload").value == "") {
                ssnMessage = $('#upload-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#upload-message');
                ssnMessage.hide();
            }
            if (document.getElementById("NotificationPerson").value == "") {
                ssnMessage = $('#NotificationPerson-message');
                ssnMessage.show();
                validflg = false;
            }
            else {
                ssnMessage = $('#NotificationPerson-message');
                ssnMessage.hide();
            }
            return validflg;
        }

        function AddDocument() {

            if (Validation() == true) {

                //document.getElementById("dvItems").style.display = "";
                var cnt = document.getElementById("itemcnt").value;

                document.getElementById("itemcnt").value = cnt;
                // Find a <table> element with id="myTable":


                uploadServerPath = UploadDocument(cnt);


            }
        }

        function DisplayDocument(Filepath, cnt) {
                var filename = Filepath.substring(Filepath.lastIndexOf('/') + 1)
                filename = filename.substring(0, filename.indexOf("."))


                var table = document.getElementById("team-list");
                // Create an empty <tr> element and add it to the 1st position of the table:
                var row = table.insertRow();

                // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
                var cell0 = row.insertCell(0);
                var cell1 = row.insertCell(1);
                var cell2 = row.insertCell(2);
                var cell3 = row.insertCell(3);
                var cell4 = row.insertCell(4);
                var cell5 = row.insertCell(5);
                var cell6 = row.insertCell(6);
                var cell7 = row.insertCell(7);
                var cell8 = row.insertCell(8);
                var cell9 = row.insertCell(9);
                var cell10 = row.insertCell(10);
                var cell11 = row.insertCell(11);
                var cell12 = row.insertCell(12);

                var doctype = $('#doctype').val();
                var sdoctype = document.getElementById("doctype");
                var doctypeText = [];
                for (var i = 0; i < sdoctype.length; i++) {
                    if (sdoctype.options[i].selected) doctypeText.push(sdoctype.options[i].text);
                }

                var docname = $('#docname').val();
                var issue_autority = $('#issue_autority').val();
                var issue_date = $('#issue_date').val();
                var exp_date = $('#exp_date').val();
                var NotificationPerson = $('#NotificationPerson').val();
                var upload = $('#upload').val();



                var sNotificationPerson = document.getElementById("NotificationPerson");
                var NotificationPersonText = [];
                for (var i = 0; i < sNotificationPerson.length; i++) {
                    if (sNotificationPerson.options[i].selected) NotificationPersonText.push(sNotificationPerson.options[i].text);
                }

                var NotificationPeriod = $('#NotificationPeriod').val();
                var sNotificationPeriod = document.getElementById("NotificationPeriod");
                var sNotificationPeriodText = sNotificationPeriod.options[sNotificationPeriod.selectedIndex].text;

                var NotificationValue = $('#NotificationValue').val();

               var branch = $('#branch').val();
            var branchName = $('#branch option:selected').toArray().map(item => item.text).join();

            var Location = $('#Location').val();
            var LocationName = $('#Location option:selected').toArray().map(item => item.text).join();

            var Department = $('#Department').val();
            var DepartmentName = $('#Department option:selected').toArray().map(item => item.text).join();

            cell0.innerHTML = " <img src='@Url.Content("~/images/cancel.png")' onclick='deleteRow(this)' style='cursor:pointer; padding-right: 5px;'/>";
            cell1.innerHTML = "<input type='hidden' id='branch" + cnt + "' name='branch" + cnt + "' value='" + branch + "'>" + branchName;
            cell2.innerHTML = "<input type='hidden' id='Department" + cnt + "' name='Department" + cnt + "' value='" + Department + "'>" + DepartmentName;
            cell3.innerHTML = "<input type='hidden' id='Location" + cnt + "' name='Location" + cnt + "' value='" + Location + "'>" + LocationName;
                cell4.innerHTML = "<input type='hidden' id='doctype" + cnt + "' name='doctype" + cnt + "' value='" + doctype + "'>" + doctypeText;
                cell5.innerHTML = "<input type='hidden' id='docname" + cnt + "' name='docname" + cnt + "' value='" + docname + "'>" + docname;
                cell6.innerHTML = "<input type='hidden' id='issue_date" + cnt + "' name='issue_date" + cnt + "' value='" + issue_date + "'>" + issue_date;
                cell7.innerHTML = "<input type='hidden' id='exp_date" + cnt + "' name='exp_date" + cnt + "' value='" + exp_date + "'>" + exp_date;
                cell8.innerHTML = "<input type='hidden' id='issue_autority" + cnt + "' name='issue_autority" + cnt + "' value='" + issue_autority + "'>" + issue_autority;
                cell9.innerHTML = "<input type='hidden' id='NotificationPerson" + cnt + "' name='NotificationPerson" + cnt + "' value='" + NotificationPerson + "'>" + NotificationPersonText;
                cell10.innerHTML = "<input type='hidden' id='upload" + cnt + "' name='upload" + cnt + "' value='" + Filepath + "'>" + filename;
                cell11.innerHTML = "<input type='hidden' id='NotificationPeriod" + cnt + "' name='NotificationPeriod" + cnt + "' value='" + NotificationPeriod + "'>" + sNotificationPeriodText;
                cell12.innerHTML = "<input type='hidden' id='NotificationValue" + cnt + "' name='NotificationValue" + cnt + "' value='" + NotificationValue + "'>" + NotificationValue;

                cnt++;
                document.getElementById("itemcnt").value = cnt;
            document.getElementById("btnCreate").classList.remove(hideClass);
            document.getElementById("btnCreate").classList.add(showClass);
            document.getElementById("hidden card").classList.remove(hideClass);
            document.getElementById("hidden card").classList.add(showClass);
                ResetControl();
            }

                function deleteRow(btn) {
                    var row = btn.parentNode.parentNode;
                    row.parentNode.removeChild(row);
                    var cnt = document.getElementById("itemcnt").value;
                    cnt--;

                    document.getElementById("itemcnt").value = cnt;
                    if (cnt == "0") {

                        document.getElementById("btnCreate").classList.add(hideClass);
                        document.getElementById("btnCreate").classList.remove(showClass);
                        document.getElementById("hidden card").classList.remove(showClass);
                        document.getElementById("hidden card").classList.add(hideClass);
                    }
                }


        function ResetControl() {
            $('#doctype').val(null).trigger('change');
            document.getElementById("docname").value = "";
            document.getElementById("issue_date").value = "";
            document.getElementById("exp_date").value = "";
            $('#NotificationPerson').val(null).trigger('change');
            document.getElementById("issue_autority").value = "";
            document.getElementById("upload").value = "";
            $('#upload').fileinput('reset');

            document.getElementById("NotificationPeriod").selectedIndex = "0";
            $('#NotificationPeriod').trigger('change');
            document.getElementById("NotificationValue").value = "0";
            $('#branch').val('').trigger('change');
            $('#Department').val('').trigger('change');
            $('#Location').val('').trigger('change');

            var ssnMessage = $('#doctype-message');
            ssnMessage.hide();
            ssnMessage = $('#docname-message');
            ssnMessage.hide();
            ssnMessage = $('#issue_date-message');
            ssnMessage.hide();
            ssnMessage = $('#exp_date-message');
            ssnMessage.hide();
            ssnMessage = $('#NotificationPerson-message');
            ssnMessage.hide();
            var ssnMessage = $('#branch-message');
            ssnMessage.hide();
            var ssnMessage = $('#Department-message');
            ssnMessage.hide();
            var ssnMessage = $('#Location-message');
            ssnMessage.hide();

        }

          function UploadDocument(ind) {
            var upload = ($("#upload")).files; //$('#testfile').file;
            var formData = new FormData();
            var totalFiles = document.getElementById("upload").files.length;
            for (var i = 0; i < totalFiles; i++) {
                var file = document.getElementById("upload").files[i];
                formData.append("upload", file);
            }
            jQuery.ajax({
                url: '@Url.Action("UploadDocument", "DocumentTracking")',
                type: 'POST',
                contentType: false,
                processData: false,
                data: formData,
                success: function (result) {
                   // document.getElementById("upload" + ind).value = result;
                   // uploadServerPath = result;
                    DisplayDocument(result,ind);
                    return result;
                }
            });
        }

                function checkDate() {

                    var dt2 = document.getElementById("exp_date").value;
                    var dt1 = document.getElementById("issue_date").value;

                    if (new Date(dt1).getTime() > new Date(dt2).getTime()) {

                        bootbox.alert({
                            title: 'Issue Date',
                            message: 'Issue date should not be lesser than the Expiry date.'
                        });
                        $('#issue_date').val("");
                    }
                }

     function GetDeptList() {
            var selectedValues = [];
            $("#branch :selected").each(function () {
                selectedValues.push($(this).val());
            });
         var svalue = selectedValues.join(",");

           /* GetEmpList();*/
            jQuery.ajax({
                url: '@Url.Action("FunGetGDeptListbymultiBranch", "Global")',
                type: 'POST',
                dataType: "json",
                data: { 'branch': svalue },
                success: function (result) {
                    GetLocList(svalue);
                    $("#Department").children('option').remove();
                    $("#Department").trigger('change');
                    if (result != null && result.length > 0) {
                        $.each(result, function (index, item) {
                            $("#Department").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });
                        $("#Department").trigger('change');
                        return;
                    }
                }
            });
        }

        function GetLocList(svalue) {
            jQuery.ajax({
                url: '@Url.Action("FunGetGLocListbymultiBranch", "Global")',
                type: 'POST',
                dataType: "json",
                data: { 'branch': svalue },
                success: function (result) {
                    $("#Location").children('option').remove();
                    $("#Location").trigger('change');
                    if (result != null && result.length > 0) {
                        $.each(result, function (index, item) {
                            $("#Location").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });
                        $("#Location").trigger('change');
                        return;
                    }
                }
            });
        }

        function GetEmpList() {

            var sbranch = $.map($("#branch option:selected"), function (el, i) {
                return $(el).val();
            });
            var sbvalue = (sbranch.join(","));

            var sDepartment = $.map($("#Department option:selected"), function (el, i) {
                return $(el).val();
            });
            var sdvalue = (sDepartment.join(","));

            var sLocation= $.map($("#Location option:selected"), function (el, i) {
                return $(el).val();
            });
            var slvalue = (sLocation.join(","));

            jQuery.ajax({
                url: '@Url.Action("FunGetGEmpListBymulitBDL", "Global")',
                type: 'POST',
                dataType: "json",
                data: { 'sDivision': sbvalue, 'sDept': sdvalue, 'sLoc': slvalue},
                success: function (result) {
                    $("#NotificationPerson").children('option').remove();
                    $("#NotificationPerson").trigger('change');
                    if (result != null && result.length > 0) {
                        $.each(result, function (index, item) {
                            $("#NotificationPerson").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });
                        $("#NotificationPerson").trigger('change');
                        return;
                    }
                }
            });
        }
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
