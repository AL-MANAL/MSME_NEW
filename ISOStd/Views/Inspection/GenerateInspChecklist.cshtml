@using PagedList;
@using PagedList.Mvc;

@model List<ISOStd.Models.InspctionQuestionModels>

    @{
        ViewBag.Title = "";
        ISOStd.Models.clsGlobal Obj = new ISOStd.Models.clsGlobal();
    }


    @section featured {

        <div class="page-header page-header-light">
            <div class="page-header-content header-elements-md-inline">
                <div class="page-title d-flex">
                    <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>
                </div>
            </div>
            <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
                <div class="d-flex">
                    <div class="breadcrumb">
                        <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                            <span class="breadcrumb-item"> Home</span>
                        </a>
                        <span class="breadcrumb-item active">Generate inspection checklist</span>
                    </div>
                </div>
            </div>
        </div>
    }

    <style>
        .hidden {
            display: none !important;
        }
    </style>

    <div class="card">
        <div class="card-header header-elements-inline bg-primary">
            <h5 class="card-title">Generate inspection checklist</h5>
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>
        <div class="card-body">
            <a class="btn btn-outline bg-orange text-orange border-orange btn-ladda btn-ladda-progress ladda-button" data-style="radius" href='@Url.Action("AddInspectionQuestions", "Inspection")' title="">
                <span class="ladda-label">Add New</span>
                <span class="ladda-spinner"></span>
            </a>
            <br />
            <hr />

            @if (ViewBag.Branch != null)
            {
                <div class="row">
                    <div class="col-md-4">
                        <select class="form-control select-search select2-hidden-accessible" data-fouc id="branch_name" name="branch_name" onchange="getDetails()">
                            @*<option value='' hidden>Directorate</option>*@
                            @if (ViewBag.Branch != null)
                            {
                                foreach (var item in ViewBag.Branch)
                                {
                                    if (item.Value == ViewBag.Branch_name)
                                    {
                                        <option value='@item.Value' selected>@item.Text</option>
                                    }
                                    else
                                    {
                                        <option value='@item.Value'>@item.Text</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                </div>
            }
        </div>
        <table class="table table-bordered table-striped table-hover datatable-responsive" id="table1">
            <thead>
                <tr>
                    <th>
                        Sl No.
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().checklist_ref)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().insp_type)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().dept)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Section)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().insp_area)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().insp_criteria)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().checklist_status)
                    </th>
                    <th data-priority="2" class="text-center not-export-column">Actions</th>
                </tr>
            </thead>

            <tbody>
                @if (Model != null && Model.Count() > 0)
            {
                int i = 0;
                foreach (var item in Model)
                {
                    i = i + 1;
                        <tr>
                            <td>
                               @i
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.checklist_ref)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.insp_type)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.dept)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.Section)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.insp_area)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.insp_criteria)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.checklist_status)
                            </td>
                            <td class="text-center">
                                <div class="list-icons">
                                    <div class="list-icons-item dropdown">
                                        <a href="#" class="list-icons-item caret-0 dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-gear mr-2"></i>
                                        </a>
                                        <div class="dropdown-menu dropdown-menu-right">
                                            <a class="dropdown-item" href='@Url.Action("InspChecklistDetails", "Inspection", new { id_question_master = item.id_question_master })' title="View" onclick="HyperLinkProgressIconFunction()">
                                                <i class="icon-pencil7"></i>View
                                            </a>
                                            <a class="dropdown-item" href='@Url.Action("GenerateInspChecklistHistory", "Inspection", new { id_question_master = item.id_question_master })' title="History" onclick="HyperLinkProgressIconFunction()">
                                                <i class="icon-pencil7"></i>History
                                            </a>
                                            @if (item.checklist_status == "Draft")
                                            {
                                                <a class="dropdown-item" href='@Url.Action("EditInspectionQuestions", "Inspection", new { id_question_master = item.id_question_master })' title="Edit" onclick="HyperLinkProgressIconFunction()">
                                                    <i class="icon-pencil7"></i>Edit
                                                </a>
                                            }
                                            @if (item.checklist_status == "Approved")
                                            {
                                            <a class="dropdown-item" href='@Url.Action("InspectionQuestionsRev", "Inspection", new { id_question_master = item.id_question_master })' title="Revise" onclick="HyperLinkProgressIconFunction()">
                                                <i class="icon-pencil7"></i>Revise
                                            </a>
                                            }
@if (item.checklist_status == "Approved")
{
                                            <span class="dropdown-item text-center" title="Invalid" onclick="Invalid(@item.id_question_master)" style="cursor:pointer;"><i class="icon-bin"></i>Invalid</span>
}
                                            <span class="dropdown-item text-center" title="Delete" onclick="DeleteItems(@item.id_question_master)" style="cursor:pointer;"><i class="icon-bin"></i>Delete</span>
                                        </div>
                                    </div>
                                </div>
                            </td>


                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>


    @section scripts {
        <script>


               $(document).ready(function () {

            @if (TempData["alertdata"] != null)
    {

        @: new Noty({
                                        @:     text: '@TempData["alertdata"]',
                                        @:     type: 'error'
                                        @:     }).show();

                            }

            @if (@TempData["Successdata"] != null)
    {

        @:    new Noty({
                                        @:       text: '@TempData["Successdata"]',
                                        @:       type: 'success'
                                        @:        }).show();

                            }
        });



                var table1 = function () {
                    @*var ShowEdit = @(Obj.GetCurrentUserSession().InternalDoc.Contains("3") ? "true" : "false");
              var ShowDownld = @(Obj.GetCurrentUserSession().InternalDoc.Contains("4") ? "true" : "false");
              var ShowDel = @(Obj.GetCurrentUserSession().InternalDoc.Contains("5") ? "true" : "false");*@

                    // Basic Datatable examples
                    var _componentDatatableBasic = function () {
                        if (!$().DataTable) {
                            console.warn('Warning - datatables.min.js is not loaded.');
                            return;
                        }

                        //Setting datatable defaults
                        $.extend($.fn.dataTable.defaults, {
                            autoWidth: false,
                            responsive:true,
                            columnDefs: [{
                                orderable: false,
                                //width: 100,
                                targets: 'not-export-column'

                            }],
                            responsivePriority: 2, targets: -1,
                            colReorder: false,
                            dom: '<"datatable-header"fBl><"datatable-scroll-wrap"t><"datatable-footer"ip>',
                            //dom: 'lBfrtip',
                            language: {
                                search: '<span>Filter:</span> _INPUT_',
                                searchPlaceholder: 'Type to filter...',
                                lengthMenu: '<span>Show:</span> _MENU_',
                                paginate: { 'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;' }
                            }
                        });

                        var myClass = "";


                        var table = $('#table1').DataTable({
                            drawCallback: function () {

                                var dropdownMenu;

                                // and when you show it, move it to the body
                                $('.datatable-responsive').on('show.bs.dropdown', function (e) {

                                    // grab the menu
                                    dropdownMenu = $(e.target).find('.dropdown-menu');

                                    // detach it and append it to the body
                                    $('body').append(dropdownMenu.detach());

                                    // grab the new offset position
                                    var eOffset = $(e.target).offset();

                                    // make sure to place it where it would normally go (this could be improved)
                                    dropdownMenu.css({
                                        'display': 'block',
                                        'top': eOffset.top + $(e.target).outerHeight(),
                                        'left': eOffset.left
                                    });
                                });

                                // and when you hide it, reattach the drop down, and hide it normally
                                $('.datatable-responsive').on('hide.bs.dropdown', function (e) {
                                    $(e.target).append(dropdownMenu.detach());
                                    dropdownMenu.hide();
                                });

                            },

                            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                            colReorder: {
                                fixedColumnsLeft: 1
                            },
                            //stateSave: true,
                            //stateSaveParams: function (settings, data) {
                            //    for (var i = 0, ien = data.columns.length; i < ien; i++) {
                            //        delete data.columns[i].visible;
                            //        delete data.columns[i].search;
                            //    }
                            //},
                            scrollY: '350px',
                            scrollCollapse: true,

                            keys: {
                                className: 'focus focus-success'
                            },

                            buttons: {
                                buttons: [
                                    {
                                        extend: 'copyHtml5',
                                        className: myClass,//className: 'btn btn-light',
                                        title: 'Internal Document History Data export',
                                        exportOptions: {
                                            columns: ':visible :not(.not-export-column)'
                                        },
                                    },
                                    {
                                        extend: 'excelHtml5',
                                        className: myClass,//className: 'btn btn-light',
                                        title: 'Internal Document  Data export',
                                        exportOptions: {
                                            columns: ':visible :not(.not-export-column)'
                                        },

                                    },
                                    {
                                        extend: 'pdfHtml5',
                                        className: myClass,//className: 'btn btn-light',
                                        title: 'Internal Document  Data export',
                                        exportOptions: {
                                            columns: ':visible :not(.not-export-column)'
                                        },
                                    },
                                    {
                                        extend: 'csvHtml5',
                                        className: myClass,//className: 'btn btn-light',
                                        title: 'Internal Document  Data export',
                                        exportOptions: {
                                            columns: ':visible :not(.not-export-column)'
                                        },
                                    },
                                    {
                                        extend: 'print',
                                        className: myClass,//className: 'btn btn-light',
                                        title: 'Internal Document  Data export',
                                        exportOptions: {
                                            columns: ':visible :not(.not-export-column)'
                                        },
                                    },

                                    {
                                        extend: 'colvis',
                                        text: '<i class="icon-three-bars"></i>',
                                        className: 'btn bg-blue btn-icon dropdown-toggle',
                                        columns: ':visible:not(.not-export-column)'
                                    }
                                ]
                            }

                        });
                        // Adjust columns on window resize
                        setTimeout(function () {
                            $(window).on('resize', function () {
                                table.columns.adjust();
                            });
                        }, 100);


                        //Redraw table on click toggle. -------table.columns.adjust doesn't work properly upon calling after toggle (width increase/decrease = redraw table.).
                        $('.sidebar-control').on('click', function () {

                            setTimeout(function () {
                                //alert("gii");

                                table.columns.adjust().draw();
                                $("#table1").resize();
                            } , 100);

                        });
                        //}

                        $('#table1').on('page.dt', function () {
                            //table.draw();
                            //alert("zzz1");
                            $("#table1").resize();

                        });

                        $('#table1').on('column-visibility.dt', function () {
                            //table.draw();
                            //alert("zzz2");
                            $("#table1").resize();

                        });

                        $('#table1').on('order.dt', function () {
                            //table.draw();
                            //alert("zzz3");
                            $("#table1").resize();

                        });


                        $('#table1').on('responsive-display.dt', function () {
                            //table.draw();
                            //alert("zzz4");
                            $("#table1").resize();

                        });


                        $('#table1').on('responsive-resize.dt', function () {
                            //table.draw();
                            //alert("zzz4");
                            $("#table1").resize();

                        });


                        //.on('order.dt', function () {
                        //    table.columns.adjust().draw();
                        //    $("#qhse").resize(); })
                        //.on('search.dt', function () {
                        //    table.columns.adjust().draw();
                        //    $("#qhse").resize(); })

                        //.on('column-visibility.dt', function () {
                        //    table.columns.adjust().draw();
                        //    $("#qhse").resize();
                        //})
                    };

                    // Select2 for length menu styling
                    var _componentSelect2 = function () {
                        if (!$().select2) {
                            console.warn('Warning - select2.min.js is not loaded.');
                            return;
                        }

                        // Initialize
                        $('.dataTables_length select').select2({
                            minimumResultsForSearch: Infinity,
                            dropdownAutoWidth: true,
                            width: 'auto'
                        });
                    };


                    //
                    // Return objects assigned to module
                    //

                    return {
                        init: function () {
                            _componentDatatableBasic();
                            _componentSelect2();
                        }
                    }
                }();


                // Initialize module
                // ------------------------------

                document.addEventListener('DOMContentLoaded', function () {
                    table1.init();
                });


                function Invalid(id_question_master) {
                    bootbox.confirm({
                        title: 'Confirm dialog',
                        message: 'Are you Sure you want to Invalid the current Record?',
                        buttons: {
                            confirm: {
                                label: 'Yes',
                                className: 'btn-primary'
                            },
                            cancel: {
                                label: 'Cancel',
                                className: 'btn-link'
                            }
                        },
                        callback: function (r) {

                            if (r == true) {

                                bootbox.prompt({
                                    title: "Reason for invalid",
                                    centerVertical: true,
                                    callback: function (result) {
                                        if (result != null) {

                                            jQuery.ajax({
                                                url: '@Url.Action("InspChecklistInvalid", "Inspection")',
                                                type: 'POST',
                                                dataType: "json",
                                                data: { 'id_question_master': id_question_master, 'invalid_reason': result },
                                                success: function (result) {
                                                    //// Add new params to the querystring dictionary
                                                    window.location.href =
                                                        window.location.protocol + "//" +
                                                        window.location.host +
                                                        window.location.pathname
                                                }
                                            });
                                            return true;
                                        }
                                    }
                                });
                            }
                            else if (r == false) {
                                bootbox.hideAll();
                                return false;
                            }

                        }
                    });
                }

                function DeleteItems(id_question_master) {
                    bootbox.confirm({
                        title: 'Confirm dialog',
                        message: 'Are you Sure you want to Delete the current Record?',
                        buttons: {
                            confirm: {
                                label: 'Yes',
                                className: 'btn-primary'
                            },
                            cancel: {
                                label: 'Cancel',
                                className: 'btn-link'
                            }
                        },
                        callback: function (r) {

                            if (r == true) {
                                jQuery.ajax({
                                    url: '@Url.Action("InspChecklistDelete", "Inspection")',
                                    type: 'POST',
                                    dataType: "json",
                                    data: { 'id_question_master': id_question_master },
                                    success: function (result) {
                                        //// Add new params to the querystring dictionary
                                        window.location.href =
                                            window.location.protocol + "//" +
                                            window.location.host +
                                            window.location.pathname
                                    }
                                });
                                return true;
                            }
                            else if (r == false) {
                                bootbox.hideAll();
                                return false;
                            }

                        }
                    });
                }
            function getDetails() {
                var branch_name = document.getElementById("branch_name").value;
                var params = {
                    branch_name: branch_name
                };
                queryString = $.param(params);

                window.location.href =
                    window.location.protocol + "//" +
                    window.location.host +
                    window.location.pathname +
                   '?' + queryString;
            }
        </script>

    }
