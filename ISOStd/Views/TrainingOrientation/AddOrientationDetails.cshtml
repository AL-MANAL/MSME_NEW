@using PagedList;
@using PagedList.Mvc;

@model List<ISOStd.Models.TrainingOrientationModels>

@{
    ViewBag.Title = "";
    ISOStd.Models.clsGlobal Obj = new ISOStd.Models.clsGlobal();
}
               @{

                   var ShowEdit = Obj.GetCurrentUserSession().AddTopic.Contains("3") ? true : false;
                   var ShowDownld = Obj.GetCurrentUserSession().AddTopic.Contains("4") ? true : false;
                   var ShowDel = Obj.GetCurrentUserSession().AddTopic.Contains("5") ? true : false;
               }
@section featured {

    <div class="page-header page-header-light">

        <div class="page-header-content header-elements-md-inline">
            <div class="page-title d-flex">
                <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>

            </div>
        </div>

        <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
            <div class="d-flex">
                <div class="breadcrumb">
                    <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item">Home</span>
                    </a>
                    <span class="breadcrumb-item active">Add Training Topic</span>
                </div>
                <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
            </div>

            @*<div class="header-elements d-none">
                <div class="breadcrumb justify-content-center">


                    <div class="breadcrumb-elements-item dropdown p-0">
                        <a href="#" class="breadcrumb-elements-item dropdown-toggle" data-toggle="dropdown">
                            <i class="icon-gear mr-2"></i>
                            Settings
                        </a>

                        <div class="dropdown-menu dropdown-menu-right">

                            <div class="dropdown-divider"></div>
                            <a href="#" class="dropdown-item"><i class="icon-gear"></i> All settings</a>
                        </div>
                    </div>
                </div>
            </div>*@
        </div>
    </div>
}

    <style>
        .hidden {
            display: none !important;
        }
    </style>

@using (Html.BeginForm("AddTrainingOrientation", "TrainingOrientation", FormMethod.Post,
                     new { enctype = "multipart/form-data", id = "form1", name = "form1" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-header header-elements-inline bg-primary">
            <h5 class="card-title">Add Training Topic</h5>
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="container-fluid">

                <table class="table table-lg">
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                           Division<text style="color:red;">*</text>
                        </td>
                        <td class="col">
                            <select class="form-control select-fixed-multiple" multiple="multiple" data-fouc id="branch" name="branch" onchange="GetDeptList()">
                                @*<option value='' hidden>Select</option>*@
                                @if (ViewBag.BranchList != null)
                                {
                                    foreach (var data in ViewBag.BranchList)
                                    {
                                        if (Array.IndexOf(ViewBag.branch.ToString().Split(','), data.Value) >= 0)
                                        {
                                            <option value='@data.Value' selected>@data.Text</option>
                                        }
                                        else
                                        {
                                            <option value='@data.Value'>@data.Text</option>
                                        }
                                    }
                                }
                            </select>
                        </td>
                        <td class="col-xs-3 col-md-2">
                           Department<text style="color:red;">*</text>
                        </td>
                        <td class="col">
                            <select class="form-control select-fixed-multiple" data-fouc id="Department" name="Department" multiple="multiple" required>
                                @if (ViewBag.DepartmentList != null)
                                {
                                    foreach (var item in ViewBag.DepartmentList)
                                    {
                                        if (Array.IndexOf(ViewBag.Department.ToString().Split(','), item.Value) >= 0)
                                        {
                                            <option value='@item.Value' selected>@item.Text</option>
                                        }
                                        else
                                        {
                                            <option value='@item.Value'>@item.Text</option>
                                        }
                                    }
                                }
                            </select>
                          </td>
                    </tr>
                    <tr class="row">
                        
                        <td class="col-xs-3 col-md-2">
                           Location<text style="color:red;">*</text>
                        </td>
                        <td class="col">
                            <select class="form-control select-fixed-multiple" data-fouc id="Location" name="Location" multiple="multiple" required>
                                @if (ViewBag.LocationList != null)
                                {
                                    foreach (var item in ViewBag.LocationList)
                                    {
                                        if (Array.IndexOf(ViewBag.Location.ToString().Split(','), item.Value) >= 0)
                                        {
                                            <option value='@item.Value' selected>@item.Text</option>
                                        }
                                        else
                                        {
                                            <option value='@item.Value'>@item.Text</option>
                                        }
                                    }
                                }
                            </select>
                         </td>
                        <td class="col-xs-3 col-md-2">
                            <div class="editor-label">
                                Orientation Topic<text style="color:red;">*</text>
                            </div>
                        </td>
                        <td class="col-xs-3 col-md-4">
                            <div class="editor-field">
                                <input class="form-control" type="text" id="Topic" name="Topic" required />

                            </div>
                        </td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <div class="editor-label">
                                Document Path<text style="color:red;">*</text>
                            </div>
                        </td>
                        <td class="col">
                            <div class="editor-field">
                                <input type="file" name="file" id="file" onchange="FileFormatValidation(this)" accept=".pdf, .doc, .docx, .jpg, .jpeg,.png,.xls,.xlsx,image/*" class="bootstrap-uploader" required data-fouc />

                            </div>
                        </td>
                    </tr>

                </table>
            </div>
        </div>
        @if (Obj.GetCurrentUserSession().AddTopic.Contains("3"))
        {
            <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                <button type="submit" id="btnCreate" value="Save" class="btn bg-indigo-400" onclick="ProgressIconFunction('#form1')"><i class="icon-checkmark3 mr-2"></i> Add</button>
            </div>
        }
    </div>
       
        }


<div class="card">
<div class="card-body">
                <table class="table table-bordered table-striped table-hover datatable-responsive" id="cert">
                    <thead>

                        <tr>
                            <th>
                                Sl.No
                            </th>
                            <th>
                                Division
                            </th>
                            <th>
                                Department
                            </th>
                            <th>
                                Location
                            </th>
                            <th>
                                Topic
                            </th>
                            <th>
                                Document
                            </th>
                            @*<th class="not-export-column">Edit</th>
                            <th class="not-export-column">Delete</th>*@
                            <th data-priority="2" class="text-center not-export-column">Actions</th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count() > 0)
                        {
                            int i = 0;
                            foreach (var item in Model)
                            {
                                i = i + 1;
                        <tr>
                            <td>
                                @i
                            </td>
                            <td>@Html.DisplayFor(modelItem => item.branch)</td>
                            <td>@Html.DisplayFor(modelItem => item.Department)</td>
                            <td>@Html.DisplayFor(modelItem => item.Location)</td>
                            <td>@Html.DisplayFor(modelItem => item.Topic)</td>
                            <td>
                                @if (item.DocUploadPath != "")
                                {
                                    <a href='@Url.Action("DisplayDocument", "Reports", new { Document = item.DocUploadPath })' target="_blank">Preview</a>
                                }
                            </td>
                            <td class="text-center">
                                <div class="list-icons">
                                    <div class="list-icons-item dropdown">
                                        <a href="#" class="list-icons-item caret-0 dropdown-toggle" data-toggle="dropdown">
                                            <i class="icon-gear mr-2"></i>
                                        </a>

                                        <div class="dropdown-menu dropdown-menu-right">
                                            @if (ShowEdit)
                                            {
                                                <a class="dropdown-item" href='@Url.Action("TrainingOrientationEdit", "TrainingOrientation", new { TrainingOrientation_Id = item.TrainingOrientation_Id })' title="Edit" onclick="HyperLinkProgressIconFunction()">
                                                    <i class="icon-pencil7"></i>Edit
                                                </a>

                                            }
                                            <div class="dropdown-divider"></div>
                                            @if (ShowDel)
                                            {

                                                <span class="dropdown-item text-center" title="Delete" onclick="DeleteItems(@item.TrainingOrientation_Id)" style="cursor:pointer;"><i class="icon-bin"></i>Delete</span>
                                            }

                                        </div>
                                    </div>
                                </div>
                            </td>

                            @*<td>
            <a href='@Url.Action("TrainingOrientationEdit", "TrainingOrientation", new { TrainingOrientation_Id= item.TrainingOrientation_Id })' title="Edit" onclick="HyperLinkProgressIconFunction()">
                <span class="badge badge-info">Edit</span>
            </a>
        </td>
        <td>

            <span class="badge badge-danger" title="Delete" onclick="DeleteItems(@item.TrainingOrientation_Id)" style="cursor:pointer;">Delete</span>
        </td>*@

                        </tr>
                            }
                        }

                    </tbody>
                </table>
            </div>

</div>
@section Scripts {
    <script>

        $(document).ready(function () {

        @if (TempData["alertdata"] != null ) {

           @: new Noty({
                                               @:     text: '@TempData["alertdata"]',
                                               @:     type: 'error'
                                               @: }).show();
                                      }

        @if (@TempData["Successdata"] != null ) {

        @:    new Noty({
                                             @:       text: '@TempData["Successdata"]',
                                             @:       type: 'success'
         @:}).show();
        }
        });

        function FileFormatValidation(file) {
            var ext = file.value.split(".").pop().toLowerCase();
            if ($.inArray(ext, ["pdf", "xlsx", "xls", "doc", "docx", "jpg", "jpeg", "gif", ".png"]) == -1) {
                file.value = "";
                bootbox.alert({
                    title: 'File type',
                    message: 'Invalid file format, please upload only doc, pdf, docx, xls, xls,jpg, jpeg, gif, png format'
                });
            }
        }
        var cert = function () {

            @*var ShowEdit = @(Obj.GetCurrentUserSession().AddTopic.Contains("3") ? "true" : "false");
            var ShowDownld = @(Obj.GetCurrentUserSession().AddTopic.Contains("4") ? "true" : "false");
            var ShowDel = @(Obj.GetCurrentUserSession().AddTopic.Contains("5") ? "true" : "false");*@

            // Basic Datatable examples
            var _componentDatatableBasic = function () {
                if (!$().DataTable) {
                    console.warn('Warning - datatables.min.js is not loaded.');
                    return;
                }

                //Setting datatable defaults
                $.extend($.fn.dataTable.defaults, {
                    autoWidth: false,
                    responsive: true,
                    columnDefs: [{
                        orderable: false,
                        //width: 100,
                        targets: 'not-export-column'
                 
                    }],
                    responsivePriority: 2, targets: -1, 
                    colReorder: false,
                    dom: '<"datatable-header"fBl><"datatable-scroll-wrap"t><"datatable-footer"ip>',
                    //dom: 'lBfrtip',
                    language: {
                        search: '<span>Filter:</span> _INPUT_',
                        searchPlaceholder: 'Type to filter...',
                        lengthMenu: '<span>Show:</span> _MENU_',
                        paginate: { 'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;' }
                    }
                });

                    var myClass = "";
                var Delclass= @(Obj.GetCurrentUserSession().Perftraining.Contains("4") ? "true" : "false");
                if (Delclass == false) { myClass = 'hidden' };

                var table = $('#cert').DataTable({
                    drawCallback: function () {
                        //$('[data-toggle="popover"]').popover({

                        //    html: true,
                        //    content: setData,
                        //    container: 'body'
                        //    //data: setData,


                        //});
                        var dropdownMenu;

                        // and when you show it, move it to the body                                     
                        $('.datatable-responsive').on('show.bs.dropdown', function (e) {
                        
                            // grab the menu        
                            dropdownMenu = $(e.target).find('.dropdown-menu');

                            // detach it and append it to the body
                            $('body').append(dropdownMenu.detach());

                            // grab the new offset position
                            var eOffset = $(e.target).offset();

                            // make sure to place it where it would normally go (this could be improved)
                            dropdownMenu.css({
                                'display': 'block',
                                'top': eOffset.top + $(e.target).outerHeight(),
                                'left': eOffset.left
                            });
                        });

                        // and when you hide it, reattach the drop down, and hide it normally                                                   
                        $('.datatable-responsive').on('hide.bs.dropdown', function (e) {
                            $(e.target).append(dropdownMenu.detach());
                            dropdownMenu.hide();
                        });
                    },
                    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                    colReorder: {
                        fixedColumnsLeft: 1
                    },
                    stateSave: true,
                    stateSaveParams: function (settings, data) {
                        for (var i = 0, ien = data.columns.length; i < ien; i++) {
                            delete data.columns[i].visible;
                            delete data.columns[i].search;
                        }
                    },
                    scrollY: '350px',
                    scrollCollapse: true,                   

                    keys: {
                        className: 'focus focus-success'
                    },

                    buttons: {
                        buttons: [
                            {
                                extend: 'copyHtml5',
                                className: myClass,
                                //className: 'btn btn-light',
                                title: 'training Data export',
                                exportOptions: {
                                    columns: ':visible :not(.not-export-column)'
                                },
                            },
                            {
                                extend: 'excelHtml5',
                                className: myClass,
                                //className: 'btn btn-light',
                                title: 'training Data export',
                                exportOptions: {
                                    columns: ':visible :not(.not-export-column)'
                                },

                            },
                            {
                                extend: 'pdfHtml5',
                                className: myClass,
                                //className: 'btn btn-light',
                                title: 'training Data export',
                                exportOptions: {
                                    columns: ':visible :not(.not-export-column)'
                                },
                            },
                            {
                                extend: 'csvHtml5',
                                className: myClass,
                                //className: 'btn btn-light',
                                title: 'training Data export',
                                exportOptions: {
                                    columns: ':visible :not(.not-export-column)'
                                },
                            },
                            {
                                extend: 'print',
                                className: myClass,
                                //className: 'btn btn-light',
                                title: 'training Data export',
                                exportOptions: {
                                    columns: ':visible :not(.not-export-column)'
                                },
                            },

                            {
                                extend: 'colvis',
                                text: '<i class="icon-three-bars"></i>',
                                className: 'btn bg-blue btn-icon dropdown-toggle',
                                columns: ':visible:not(.not-export-column)'
                            }
                        ]
                    }
                });
                // Adjust columns on window resize
                setTimeout(function () {
                    $(window).on('resize', function () {
                        table.columns.adjust();
                    });
                }, 100);


                //Redraw table on click toggle. -------table.columns.adjust doesn't work properly upon calling after toggle (width increase/decrease = redraw table.).
                $('.sidebar-control').on('click', function () {

                    setTimeout(function () {
                        //alert("gii");

                        table.columns.adjust().draw();
                        $("#cert").resize();
                    }, 100);

                });
                //}

                $('#cert').on('page.dt', function () {
                    //table.draw();
                    //alert("zzz1");
                    $("#cert").resize();

                });

                $('#cert').on('column-visibility.dt', function () {
                    //table.draw();
                    //alert("zzz2");
                    $("#cert").resize();

                });

                $('#cert').on('order.dt', function () {
                    //table.draw();
                    //alert("zzz3");
                    $("#cert").resize();

                });


                $('#cert').on('responsive-display.dt', function () {
                    //table.draw();
                    //alert("zzz4");
                    $("#cert").resize();

                });


                $('#cert').on('responsive-resize.dt', function () {
                    //table.draw();
                    //alert("zzz4");
                    $("#cert").resize();

                });


                //.on('order.dt', function () {
                //    table.columns.adjust().draw();
                //    $("#qhse").resize(); })
                //.on('search.dt', function () {
                //    table.columns.adjust().draw();
                //    $("#qhse").resize(); })

                //.on('column-visibility.dt', function () {
                //    table.columns.adjust().draw();
                //    $("#qhse").resize();
                //})



            };

            // Select2 for length menu styling
            var _componentSelect2 = function () {
                if (!$().select2) {
                    console.warn('Warning - select2.min.js is not loaded.');
                    return;
                }

                // Initialize
                $('.dataTables_length select').select2({
                    minimumResultsForSearch: Infinity,
                    dropdownAutoWidth: true,
                    width: 'auto'
                });
            };


            //
            // Return objects assigned to module
            //

            return {
                init: function () {
                    _componentDatatableBasic();
                    _componentSelect2();
                }
            }
        }();


        // Initialize module
        // ------------------------------

        document.addEventListener('DOMContentLoaded', function () {
            cert.init();
        });

        function DeleteItems(TrainingOrientation_Id) {
            bootbox.confirm({
                title: 'Confirm dialog',
                message: 'Are you Sure you want to Delete the current Record?',
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-primary'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-link'
                    }
                },
                callback: function (r) {
                    if (r == true) {
                        jQuery.ajax({

                            url: '@Url.Action("OrientationTopicDelete", "TrainingOrientation")',
                            type: 'POST',
                            dataType: "json",
                            data: { 'TrainingOrientation_Id': TrainingOrientation_Id },
                            success: function (result) {


                                //// Add new params to the querystring dictionary


                                window.location.href =
                                    window.location.protocol + "//" +
                                    window.location.host +
                                    window.location.pathname

                            }
                        });
                        return true;
                    }
                    else if (r == false) {
                        bootbox.hideAll();
                        return false;
                    }

                }
            });
        }

      function GetDeptList() {
            var selectedValues = [];
            $("#branch :selected").each(function () {
                selectedValues.push($(this).val());
            });  
                jQuery.ajax({
                    url: '@Url.Action("FunGetAllDeptList", "EmployeeDetails")',
                    type: 'POST',
                    dataType: "json",
                    data: { 'branch': selectedValues },
                    success: function (result) {
                        GetLocList(selectedValues);
                        $("#Department").children('option').remove();
                        $("#Department").trigger('change');
                        if (result != null && result.length > 0) {
                            $.each(result, function (index, item) {
                                $("#Department").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                                $("#Department").trigger('change');
                            });
                            return;
                        }
                        //else {
                        //    bootbox.alert({
                        //        title: 'Department List',
                        //        message: 'No Department exists.'
                        //    });
                        //}
                    }
                });          
        }


        function GetLocList(selectedValues) {                   
            jQuery.ajax({
                url: '@Url.Action("FunGetAllLocList", "EmployeeDetails")',
                type: 'POST',
                dataType: "json",
                data: { 'branch': selectedValues },
                success: function (result) {
                    $("#Location").children('option').remove();
                    $("#Location").trigger('change');
                    if (result != null && result.length > 0) {
                        $.each(result, function (index, item) {
                            $("#Location").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            $("#Location").trigger('change');
                        });
                        return;
                    }
                    //else {
                    //    bootbox.alert({
                    //        title: 'Location List',
                    //        message: 'No Location exists.'
                    //    });
                    //}
                }
            });       
        }

    </script>
    @Scripts.Render("~/bundles/jqueryval")
}