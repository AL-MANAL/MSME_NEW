@model ISOStd.Models.MeetingModels

@{
    ViewBag.Title = "AddMeeting";
    ISOStd.Models.clsGlobal Obj = new ISOStd.Models.clsGlobal();
}

@section featured {

    <div class="page-header page-header-light">

        <div class="page-header-content header-elements-md-inline">
            <div class="page-title d-flex">
                <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>

            </div>


        </div>

        <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
            <div class="d-flex">
                <div class="breadcrumb">

                    <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item"> Home</span>
                    </a>
                    <a href="@Url.Action("MeetingList", "Meeting", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item"> Meetings</span>
                    </a>
                    <span class="breadcrumb-item active">Unplanned Meetings</span>
                </div>

                <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
            </div>

            @*<div class="header-elements d-none">
                <div class="breadcrumb justify-content-center">


                    <div class="breadcrumb-elements-item dropdown p-0">
                        <a href="#" class="breadcrumb-elements-item dropdown-toggle" data-toggle="dropdown">
                            <i class="icon-gear mr-2"></i>
                            Settings
                        </a>

                        <div class="dropdown-menu dropdown-menu-right">

                            <div class="dropdown-divider"></div>
                            <a href="#" class="dropdown-item"><i class="icon-gear"></i> All settings</a>
                        </div>
                    </div>
                </div>
            </div>*@
        </div>
    </div>
}

@using (Html.BeginForm("AddMeetingNow", "Meeting", FormMethod.Post,
                         new { enctype = "multipart/form-data", id = "form1", name = "form1" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-header header-elements-inline bg-primary">
            <h5 class="card-title">Unplanned Meetings</h5>
            <div class="header-elements">
                <div class="list-icons">
                    <a class="list-icons-item" data-action="collapse"></a>

                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="container-fluid">

                <table class="table table-lg">

                    <tr class="row">
                        <td class="col" colspan="8" style="background-color: #4cc4dd; color: #fff; font-weight: bold;">MOM Details</td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">

                            @Html.LabelFor(model => model.meeting_ref)<text style="color:red;">*</text>

                        </td>
                        <td class="col">
                            @Html.EditorFor(model => model.meeting_ref, new { htmlAttributes = new { @required = "required", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.meeting_ref)

                        </td>
                        <td class="col-xs-3 col-md-2">

                            @Html.LabelFor(model => model.meeting_date)<text style="color:red;">*</text>

                        </td>
                        <td class="col">

                            <input class="form-control" type="datetime-local" id="meeting_date" name="meeting_date" required />

                        </td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">

                            @Html.LabelFor(model => model.AttendeesUser)<text style="color:red;">*</text>

                        </td>
                        <td class="col">

                            <select id="AttendeesUser" name="AttendeesUser" required="required" class="form-control select-fixed-multiple" multiple data-fouc>
                                @if (ViewBag.EmpLists != null)
                                {
                                    foreach (var item in ViewBag.EmpLists)
                                    {
                                        <option value='@item.Value'>@item.Text</option>
                                    }
                                }
                            </select>


                        </td>
                        <td class="col-xs-3 col-md-2">

                            @Html.LabelFor(model => model.Venue)<text style="color:red;">*</text>

                        </td>
                        <td class="col">

                            @Html.TextAreaFor(model => model.Venue, new { @required = "required", @maxlength = "2000", @placeholder = "Textarea", @style = "overflow: hidden; overflow-wrap: break-word; resize: none; height: 96px;", @rows = "4", @cols = "4", @class = "form-control elastic maxlength-badge-position" })

                        </td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            @Html.LabelFor(model => model.ext_attendees)
                        </td>
                        <td class="col">
                            <input type="text" class="form-control" id="ext_attendees" name="ext_attendees"/>
                        </td>
                        <td class="col-xs-3 col-md-2">
                            @Html.LabelFor(model => model.ext_email)
                        </td>
                        <td class="col">
                            <input type="text" class="form-control" id="ext_email" name="ext_email"/>
                        </td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">

                            @Html.LabelFor(model => model.NotificationPeriod)

                        </td>
                        <td class="col">
                            <div class="form-group form-group-float">
                                <select class="form-control select-search select2-hidden-accessible" data-fouc id="NotificationPeriod" name="NotificationPeriod" required>
                                    @if (ViewBag.NotificationPeriod != null)
                                    {
                                        foreach (var item in ViewBag.NotificationPeriod)
                                        {
                                            <option value='@item.Key'>@item.Value</option>
                                        }
                                    }
                                </select>

                            </div>
                            <div class="form-group form-group-float">
                                <input class="form-control" type="number" id="NotificationValue" name="NotificationValue" value="0" required max="3" />

                                <span class="form-text text-muted"><code>(Alert on or before Target date)</code></span>


                            </div>


                        </td>
                        <td class="col-xs-3 col-md-2">

                            Attendance Sheet

                        </td>
                        <td class="col">



                            <input type="file" name="Attendees" id="Attendees" title="Upload Attendees list" onchange="FileFormatValidation(this)"
                                   accept=".pdf,.xlsx,.xls,.jpeg,.jpg,.png,.doc,.docx,image/*" class="bootstrap-uploader" data-fouc />

                        </td>
                    </tr>
                    <tr class="row">

                        <td class="col-xs-3 col-md-2">

                            MeetingType

                        </td>
                        <td class="col">

                            <select class="form-control select-search select2-hidden-accessible" data-fouc id="meeting_type_desc" name="meeting_type_desc" required="required" onchange="PopulateAgenda()">
                                <option value='' hidden>Select</option>
                                @if (ViewBag.MeetingType != null)
                                {
                                    foreach (var item in ViewBag.MeetingType)
                                    {
                                        <option value='@item.Value'>@item.Text</option>
                                    }
                                }
                            </select>
                            <input type="hidden" id="AgendaId" name="AgendaId" />

                        </td>
                        <td class="col-xs-3 col-md-2">

                            Last Meeting Ref

                        </td>
                        <td class="col">

                            <div id="PreviousMeeting" style="display: none;">
                                <input type="hidden" id="last_meeting_id" name="last_meeting_id" />
                                <a href="#" id="last_meeting_idRefLink" target="_blank"></a>
                            </div>


                        </td>
                    </tr>
                </table>
                <br />
                <br />
                <br />
                <div id="dvAgendaItems" style="display:none;">
                    <fieldset class="border p-2">
                        <legend id="divAgendasTitle" class="font-weight-semibold"><i class="icon-file-text ml-2 mr-2"></i> Agendas</legend>
                        @*<div id="divAgendasTitle" style="font-weight: bold;">Agendas</div>*@
                        <table class="table table-lg" id="tbl_Agenda">
                            <tr class="row" style="background-color: #4cc4dd; color: #fff; font-weight: bold;">
                                <th class="col col-xs-10">Name</th>
                                <th class="col col-xs-10">Description</th>
                                <th class="col col-xs-2">Action</th>
                            </tr>

                        </table>

                    </fieldset>

                    <br />
                    <br />
                    <br />
                    <div id="tbl_AgendaDetails" style="display:none;">
                        <fieldset class="border p-2">
                            <legend class="font-weight-semibold"><i class="icon-file-text ml-2 mr-2"></i> Meeting Agenda detail</legend>
                            
                            <table class="table table-lg">


                                <tr class="row">
                                    <td class="col-xs-3 col-md-2">
                                        @Html.LabelFor(model => model.item_discussed)

                                    </td>
                                    <td class="col">

                                        <textarea maxlength="2000" placeholder="Textarea" style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 96px;" rows="4" cols="4" class="form-control elastic maxlength-badge-position" id="item_discussed" name="item_discussed"> </textarea>
                                        <span class="field-validation-error"><span id="discussed-message" style="display: none;">Item discussed is required.</span></span>
                                        @Html.ValidationMessageFor(model => model.item_discussed)

                                    </td>
                                    <td class="col-xs-3 col-md-2">

                                        @Html.LabelFor(model => model.action_agreed)

                                    </td>
                                    <td class="col">

                                        <textarea maxlength="2000" placeholder="Textarea" style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 96px;" rows="4" cols="4" class="form-control elastic maxlength-badge-position" id="action_agreed" name="action_agreed"></textarea>
                                        <span class="field-validation-error"><span id="agreed-message" style="display: none;">Action agreed is required.</span></span>
                                        @Html.ValidationMessageFor(model => model.action_agreed)

                                    </td>
                                </tr>
                                <tr class="row">
                                    <td class="col-xs-3 col-md-2">

                                        @Html.LabelFor(model => model.due_date)

                                    </td>
                                    <td class="col">

                                        <input class="form-control" type="date" id="due_date" name="due_date" onchange="checkDate();" />
                                        <span class="field-validation-error"><span id="due-message" style="display: none;">Due date is required.</span></span>
                                        @Html.ValidationMessageFor(model => model.due_date)

                                    </td>
                                    <td class="col-xs-3 col-md-2">

                                        @Html.LabelFor(model => model.item_status)

                                    </td>
                                    <td class="col">

                                        <select class="form-control select-search select2-hidden-accessible" data-fouc id="item_status" name="item_status" required>
                                            @if (ViewBag.item_status != null)
                                            {
                                                foreach (var item in ViewBag.item_status)
                                                {
                                                    <option value='@item.Value'>@item.Text</option>
                                                }
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => model.item_status)

                                    </td>
                                </tr>
                                <tr class="row">
                                    <td class="col-xs-3 col-md-2">

                                        @Html.LabelFor(model => model.action_owner)

                                    </td>
                                    <td class="col">

                                        <select class="form-control select-search select2-hidden-accessible" data-fouc id="action_owner" name="action_owner">
                                            <option value='' hidden>Select</option>
                                            @if (ViewBag.EmpLists != null)
                                            {
                                                foreach (var item in ViewBag.EmpLists)
                                                {
                                                    <option value='@item.Value'>@item.Text</option>
                                                }
                                            }
                                        </select>
                                        <span class="field-validation-error"><span id="owner-message" style="display: none;">Please select the Action Owner.</span></span>
                                        @Html.ValidationMessageFor(model => model.action_owner)

                                    </td>
                                </tr>

                                @if (Obj.GetCurrentUserSession().MUnplaned.Contains("3"))
                                {
                                    <tr class="row">
                                        <td class="col" colspan="4">
                                            <div style="float: right;">
                                                <input type="button" class="btn bg-indigo-400" value="Add" onclick="AddItem()" />

                                            </div>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </fieldset>
                    </div>
                </div>


                <br />
                <br />
                <br />



               
             
                <fieldset class="border p-2">
                    <div class="mt-2 card card-table table-responsive shadow-0 mb-0" id="dvItems" style="display: none;">
                        <input type="hidden" id="itemcnt" name="itemcnt" value="0" />
                        <div class="editor-label">
                            <label for="Discrepancy_Details" style="background-color: #4cc4dd; width: 100%; color: white;">Added Items</label>
                            <input type="hidden" id="CurrentAgenda" name="CurrentAgenda" />
                        </div>
                        <table id="team-list" class="table table-lg">
                            <tr>
                                <th>Action</th>
                                <th>Agenda</th>
                                <th>Item discussed</th>
                                <th>Action(s) agreed</th>
                                <th>Due date / period for action</th>
                                <th>Personnel Responsible</th>
                                <th>Item Status</th>
                            </tr>
                        </table>
                    </div>
                </fieldset>
               
              



            </div>


        </div>


        <div class="card-footer bg-white d-flex justify-content-between align-items-center">

            @Html.ActionLink("Back to List", "MeetingList", null, new { @class = "btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400", onclick = "HyperLinkProgressIconFunction()" })

            <button type="submit" id="btnCreate" value="Save" disabled="disabled" class="btn bg-indigo-400" onclick="ProgressIconFunction('#form1')"><i class="icon-checkmark3 mr-2"></i> Save</button>

            @*<input type="submit" id="btnCreate" value="Save" class="btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400" onclick="ProgressIconFunction('#form1')" />*@
            @*<input type="button" value="Add" class="btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400" onclick="AddPlanner()" />*@
        </div>
        @*<div style="text-align: center;">
            @Html.ActionLink("Back to List", "MeetingList", null, new { @class = "ActionLink", onclick = "HyperLinkProgressIconFunction()" })
            <input type="submit" id="btnCreate" value="Save" disabled="disabled" onclick="ProgressIconFunction('#form1')" />
        </div>*@

    </div>
    }




    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script type="text/javascript">


            
                          //----zzz
    $(document).ready(function () {

    @if (TempData["alertdata"] != null)
    {

        @: new Noty({
        @:     text: '@TempData["alertdata"]',
        @:     type: 'error'
        @: }).show();
    }

    @if (@TempData["Successdata"] != null)
    {

        @:    new Noty({
        @:       text: '@TempData["Successdata"]',
        @:       type: 'success'
        @:   }).show();
    }
      

      

 
    });
    //zzz----






    var AgendaDiscussedList = [];

    function ValidationBefore() {
        if (document.getElementById("team-list").rows.length < 2) {
        

            bootbox.alert({
                title: 'Agenda',
                message: 'Please enter atleast 1 Agenda.'
            });
        }
        return false;
    }

    function DisplayAgenda(sId) {
        var sAgenda = document.getElementById("imgAgenda" + sId).title;
        document.getElementById("tbl_AgendaDetails").style.display = "";
        document.getElementById("dvAgendaItems").style.display = "";
        
        document.getElementById("CurrentAgenda").value = sAgenda;
        document.getElementById("item_discussed").value = "";
        document.getElementById("AgendaId").value = sId;

        $('input[name="Agendas"][value="' + sId + '"]').prop("checked", true);

        //if (AgendaDiscussedList.length > 0)
        //{
        // var Discussed = $.parseJSON(AgendaDiscussedList);
        for (var data in AgendaDiscussedList) {
            if (sAgenda == data) {
                document.getElementById("item_discussed").value = AgendaDiscussedList[data];
                break;
            }
        }
        //}
        ResetControl();

            }


            function checkDate() {


                var dt2 = document.getElementById("meeting_date").value;
                var dt1 = document.getElementById("due_date").value;

                if (new Date(dt1).getTime() < new Date(dt2).getTime()) {

                    bootbox.alert({
                        title: 'Due Date',
                        message: 'Due date cannot be before meeting date.'
                    });
                    $('#due_date').val("");
                }
            }
           //$(function () {
           //    $("#AttendeesUser").chosen();
           //    $("#meeting_type_desc").chosen();
           //    $.validator.setDefaults({ ignore: ":hidden:not('.chosen-select')" });
           //    $('#meeting_date').datepicker({
           //        dateFormat: "dd/mm/yy",
           //        buttonImageOnly: true,
           //        buttonImage: '../Images/Calender.png',
           //        showOn: 'both',
           //        changeMonth: true,
           //        changeYear: true
           //    });

           //    $('#due_date').datepicker({
           //        dateFormat: "dd/mm/yy",
           //        buttonImageOnly: true,
           //        buttonImage: '../Images/Calender.png',
           //        showOn: 'both',
           //        changeMonth: true,
           //        changeYear: true,
           //        onClose: function () {
           //            var dt1 = $('#due_date').datepicker('getDate');
           //            var dt2 = $('#meeting_date').datepicker('getDate');
           //            //check to prevent a user from entering a date below date of dt1
           //            if (dt2 > dt1) {
           //                jAlert("Due date cannot be before meeting date");
           //                $('#due_date').val("");
           //            }
           //        }
           //    });
           //    $("#meeting_date").datepicker("setDate", new Date());
           //    $("#due_date").datepicker("setDate", new Date());

           //});

           function PopulateAgenda() {

               var MeetingTypeId = $('#meeting_type_desc').val();
               //alert(AuditDepartment);
               jQuery.ajax({
                   url: '@Url.Action("GetAgendaList", "Meeting")',
                    type: 'POST',
                    dataType: "json",
                    data: { 'sMeetingTypeId': MeetingTypeId },
                    success: function (result) {
                        var table = document.getElementById("tbl_Agenda");
                        document.getElementById("dvAgendaItems").style.display = "";
                        document.getElementById("divAgendasTitle").style.display = "";


                        while (table.rows.length > 0) {
                            table.deleteRow(0);
                        }

                        if (result != "") {

                            var theaderRow = table.insertRow();

                            theaderRow.style = "background-color: #4cc4dd; color: #fff; font-weight: bold;";
                            var cellth0 = theaderRow.insertCell(0);
                            var cellth1 = theaderRow.insertCell(1);
                            var cellth2 = theaderRow.insertCell(2);

                            cellth0.innerHTML = "<th class='col col-xs-10'>Name</th>";
                            cellth1.innerHTML = "<th class='col col-xs-10'>Description</th>";
                            cellth2.innerHTML = "<th class='col col-xs-2'>Action</th>";

                            var list = result;
                            $.each(list, function (index, item) {

                                // Create an empty <tr> element and add it to the 1st position of the table:
                                var row = table.insertRow();

                                // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:

                                var cell0 = row.insertCell(0);
                                var cell1 = row.insertCell(1);
                                var cell2 = row.insertCell(2);
                                cell0.className = "col col-xs-10";
                               
                                cell1.className = "col col-xs-10";
                               
                                cell2.className = "col col-xs-2";
                                //cell0.style = "min-width: 80%; max-width: 80%; width: 80%;";
                                //cell1.style = "min-width: 20%; max-width: 20%; width: 20%";

                                var AgendaName = item.Text;
                                var Id = item.Value;

                                var dataarray = new Array();

                                dataarray = AgendaName.split("_");
                                cell0.innerHTML = "<input type='checkbox' id='Agendas' name='Agendas' value='" + Id + "'/>" + dataarray[0];;
                                cell1.innerHTML =  dataarray[1];
                                cell2.innerHTML = "<img src='@Url.Content("~/images/icon_add.png")' id='imgAgenda" + Id + "' onclick='DisplayAgenda(" + Id + ")' title='"
                                    + AgendaName + "' style='cursor:pointer;'/>";


                            });
                        }
                        else {
                            bootbox.alert({
                                title: 'Agenda',
                                message: 'No Agenda exists, please add agenda and then try again'
                            });
                           
                        }
                    }
                });

                GetPreviousMeetingRef(MeetingTypeId);
            }


    function GetPreviousMeetingRef(MeetingTypeId) {

        //var MeetingTypeId = $('#MeetingType').val();
        //alert(AuditDepartment);
        jQuery.ajax({
            url: '@Url.Action("GetPreviousMeetingRef", "Meeting")',
            type: 'POST',
            dataType: "json",
            data: { 'sMeetingTypeId': MeetingTypeId },
            success: function (result) {
                if (result != "") {
                    document.getElementById("PreviousMeeting").style.display = "";

                    document.getElementById("last_meeting_idRefLink").href = "/Meeting/MeetingDetails?meeting_ref=" + result;
                    document.getElementById("last_meeting_idRefLink").innerText = result;
                    document.getElementById("last_meeting_id").value = result;
                }
            }
        });
    }

    function Validation() {
        var validflg = true;
        var ssnMessage = "";
        var item = document.getElementById("item_discussed").value.trim();
        if (document.getElementById("item_discussed").value.trim() == "") {
            ssnMessage = $('#discussed-message');
            ssnMessage.show();
            validflg = false;
        }
        else {
            var ssnMessage = $('#discussed-message');
            ssnMessage.hide();
        }
        if (document.getElementById("action_agreed").value == "") {
            ssnMessage = $('#agreed-message');
            ssnMessage.show();
            validflg = false;
        }
        else {
            var ssnMessage = $('#agreed-message');
            ssnMessage.hide();
        }
        if (document.getElementById("due_date").value == "") {
            var ssnMessage = $('#due-message');
            ssnMessage.show();
            validflg = false;
        }
        else if (document.getElementById("due_date").value != "") {
           

            var dt2 = document.getElementById("meeting_date").value;
            var dt1 = document.getElementById("due_date").value;

            if (new Date(dt1).getTime() < new Date(dt2).getTime()) {

                var ssnMessage = $('#due-message');
                ssnMessage.show();
                validflg = false;
            }
           
        }
        else {
            var ssnMessage = $('#due-message');
            ssnMessage.hide();
        }

        if (document.getElementById("action_owner").value == "") {
            var ssnMessage = $('#owner-message');
            ssnMessage.show();
            validflg = false;
        }
        else {
            var ssnMessage = $('#owner-message');
            ssnMessage.hide();
        }

        return validflg;

    }

    function AddItem() {

        if (Validation()) {
            document.getElementById("dvItems").style.display = "";
            var cnt = document.getElementById("itemcnt").value;
            cnt++;
            document.getElementById("itemcnt").value = cnt;
            // Find a <table> element with id="myTable":
            var table = document.getElementById("team-list");

            // Create an empty <tr> element and add it to the 1st position of the table:
            var row = table.insertRow();

            // Insert new cells (<td> elements) at the 1st and 2nd position of the "new" <tr> element:
            var cell0 = row.insertCell(0);
            var cell1 = row.insertCell(1);
            var cell2 = row.insertCell(2);
            var cell3 = row.insertCell(3);
            var cell4 = row.insertCell(4);
            var cell5 = row.insertCell(5);
            var cell6 = row.insertCell(6);

            var CurrentAgenda = $('#CurrentAgenda').val().trim();
            var AgendaId = $('#AgendaId').val();
            var item_discussed = $('#item_discussed').val();
            var action_agreed = $('#action_agreed').val();
            var due_date = reformatDate($('#due_date').val());
            //var item_status = $('#item_status').val();


            // Add some text to the new cells:
                cell0.innerHTML = " <img src='@Url.Content("~/images/cancel.png")' onclick='deleteRow(this)' style='cursor:pointer; padding-right: 5px;'/>";
                cell1.innerHTML = "<input type='hidden' id='CurrentAgenda" + cnt + "' name='CurrentAgenda" + cnt + "' value='" + CurrentAgenda + "'><input type='hidden' id='CurrentAgendaId" + cnt + "' name='CurrentAgendaId" + cnt + "' value='" + AgendaId + "'>" + CurrentAgenda;
                cell2.innerHTML = "<input type='hidden' id='item_discussed" + cnt + "' name='item_discussed" + cnt + "' value='" + item_discussed + "'>" + item_discussed;
                cell3.innerHTML = "<input type='hidden' id='action_agreed" + cnt + "' name='action_agreed" + cnt + "' value='" + action_agreed + "'>" + action_agreed;
                cell4.innerHTML = "<input type='hidden' id='due_date" + cnt + "' name='due_date" + cnt + "' value='" + due_date + "'>" + due_date;

                // Action_taken_by = $('#Action_taken_by option:selected').text();
                var action_ownerText = $.map($("#action_owner option:selected"), function (el, i) {
                    return $(el).text();
                });
                var action_ownerVal = $("#action_owner").val();

                cell5.innerHTML = "<input type='hidden' id='action_owner" + cnt + "' name='action_owner" + cnt + "' value='" + action_ownerVal + "'>" + action_ownerText;

                var item_statusText = $.map($("#item_status option:selected"), function (el, i) {
                    return $(el).text();
                });
                var item_statusVal = $("#item_status").val();

                cell6.innerHTML = "<input type='hidden' id='item_status" + cnt + "' name='item_status" + cnt + "' value='" + item_statusVal + "'>" + item_statusText;

                AgendaDiscussedList[CurrentAgenda] = item_discussed;

                document.getElementById("btnCreate").disabled = false;

                ResetControl();
            }

        }


        function ResetControl() {
            $('#item_status').get(0).selectedIndex = 0;
            $('#action_owner').get(0).selectedIndex = 0;
            $('#item_status').trigger('change');
            $('#action_owner').trigger('change');
            //document.getElementById("item_discussed").value = "";
            document.getElementById("action_agreed").value = "";
            $("#due_date").val("");
        }

        function deleteRow(r) {
            var i = r.parentNode.parentNode.rowIndex;
            document.getElementById("team-list").deleteRow(i);
        }

      


            function FileFormatValidation(file) {
                var ext = file.value.split(".").pop().toLowerCase();
                if ($.inArray(ext, ["pdf", "xlsx", "xls", "doc", "docx", "jpeg", "jpg", "png"]) == -1) {
                    file.value = "";
                    bootbox.alert({
                        title: 'File type',
                        message: 'Invalid file format, please upload only xlsx,xls,pdf,jpeg,jpg,png format.'
                    });
                }
            }


            function reformatDate(dateStr) {
                dArr = dateStr.split("-");  // ex input 2010-01-18
                return dArr[2] + "/" + dArr[1] + "/" + dArr[0]; //ex out: 2018/01/10
            }
        </script>
    }
