@using PagedList;
@using PagedList.Mvc;

@model List<ISOStd.Models.TrainingCertificatesModels>

    @{
        ViewBag.Title = "";
 	ISOStd.Models.clsGlobal Obj = new ISOStd.Models.clsGlobal();
    }
   @section featured {

        <div class="page-header page-header-light">

            <div class="page-header-content header-elements-md-inline">
                <div class="page-title d-flex">
                    <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>
                </div>
            </div>

            <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
                <div class="d-flex">
                    <div class="breadcrumb">

                        <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                            <span class="breadcrumb-item">Home</span>
                        </a>
                        <a href="@Url.Action("TrainingEventsList", "TrainingEvents", null)" class="breadcrumb-item">
                            <span class="breadcrumb-item">Trainings List</span>
                        </a>
                        <span class="breadcrumb-item active">Issued Certificate List</span>
                    </div>
                    <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
                </div>

                <div class="header-elements d-none">
                    <div class="breadcrumb justify-content-center">
                        <div class="breadcrumb-elements-item dropdown p-0">
                            <a href="#" class="breadcrumb-elements-item dropdown-toggle" data-toggle="dropdown">
                                <i class="icon-gear mr-2"></i>
                                Settings
                            </a>

                            <div class="dropdown-menu dropdown-menu-right">
                                <div class="dropdown-divider"></div>
                                <a href="#" class="dropdown-item"><i class="icon-gear"></i> All settings</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
        <style>
            .hidden {
                display: none !important;
            }
        </style>

        <div class="card">

            <div class="card-header header-elements-inline bg-primary">
                <h5 class="card-title">Issued Certificate List</h5>
                <div class="header-elements">
                    <div class="list-icons">
                        <a class="list-icons-item" data-action="collapse"></a>
                    </div>
                </div>
            </div>
            @if (Obj.GetCurrentUserSession().TrainingList.Contains("3"))
            {
                <div>
                    <div class="card-header bg-white header-elements-sm-inline">
                        <div class="header-elements">
                            <a class="btn btn-outline bg-orange text-orange border-orange btn-ladda btn-ladda-progress ladda-button" data-style="radius" href='@Url.Action("IssueTrainingCertificate", "Trainings", new { TrainingID = ViewBag.TrainingID })' title="Add New">
                                <span class="ladda-label">Issue Certificate</span>
                                <span class="ladda-spinner"></span>
                            </a>
                        </div>
                    </div>
                </div>
            }

            <div class="card-body">
                <table class="table table-bordered table-striped table-hover datatable-responsive" id="training">
                    <thead>

                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.First().Training_Topic)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.First().Cert_Ref)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.First().Person_Name)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.First().Cert_Issue_Date)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.First().Cert_Exp_Date)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.First().Cert_issued_by)
                            </th>
                            <th class="not-export-column">
                                View Cert
                            </th>
                            <th class="not-export-column">Edit</th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count() > 0)
                        {

                            foreach (var item in Model)
                            {

                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Training_Topic)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Cert_Ref)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Person_Name)
                                    </td>
                                    <td>
                                        @if (item.Cert_Issue_Date > Convert.ToDateTime("01/01/0001"))
                                        {
                                            @item.Cert_Issue_Date.ToString("dd/MM/yyyy")
                                        }
                                    </td>
                                    <td>
                                        @if (item.Cert_Exp_Date > Convert.ToDateTime("01/01/0001"))
                                        {
                                            @item.Cert_Exp_Date.ToString("dd/MM/yyyy")
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Cert_issued_by)
                                    </td>
                                    <td>
                                        @if (item.Cert_Upload != "")
                                        {
                                            <a href='@Url.Action("DisplayDocument", "Reports", new { Document = item.Cert_Upload })' target="_blank">Preview</a>
                                        }
                                    </td>
                                    <td>
                                        <a href='@Url.Action("TrainingCertificateEdit", "Trainings", new { CertId= item.CertId})' title="Edit" onclick="HyperLinkProgressIconFunction()">
                                            <span class="badge badge-info">Edit</span>
                                        </a>
                                    </td>
                                </tr>
                            }
                        }

                    </tbody>
                </table>
            </div>
        </div>

  @section scripts {
                <script type="text/javascript">

                    //----zzz
                    $(document).ready(function () {

        @if (TempData["alertdata"] != null ) {

           @: new Noty({
                                               @:     text: '@TempData["alertdata"]',
                                               @:     type: 'error'
                                               @: }).show();
                                                                }

        @if (@TempData["Successdata"] != null ) {

        @:    new Noty({
                                             @:       text: '@TempData["Successdata"]',
                                             @:       type: 'success'
         @:}).show();
        }
                    });
                    //zzz----




                    var training = function () {


                        var ShowEdit = @(Obj.GetCurrentUserSession().TrainingList.Contains("3") ? "true" : "false");
                var ShowDownld = @(Obj.GetCurrentUserSession().TrainingList.Contains("4") ? "true" : "false");

                        // Basic Datatable examples
                        var _componentDatatableBasic = function () {
                            if (!$().DataTable) {
                                console.warn('Warning - datatables.min.js is not loaded.');
                                return;
                            }

                            //Setting datatable defaults
                            $.extend($.fn.dataTable.defaults, {
                                autoWidth: false,
                                responsive: true,
                                columnDefs: [{
                                    orderable: false,
                                    width: 100,
                                    targets: [6, 7]
                                }, {
                                        'targets': [7],
                                        'visible': ShowEdit
                                    }, {
                                        'targets': [6],
                                        'visible': ShowDownld
                                    }],

                                colReorder: false,
                                dom: '<"datatable-header"fBl><"datatable-scroll-wrap"t><"datatable-footer"ip>',
                                //dom: 'lBfrtip',
                                language: {
                                    search: '<span>Filter:</span> _INPUT_',
                                    searchPlaceholder: 'Type to filter...',
                                    lengthMenu: '<span>Show:</span> _MENU_',
                                    paginate: { 'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;' }
                                }
                            });

                              var myClass = "";
                var Delclass= @(Obj.GetCurrentUserSession().TrainingList.Contains("4") ? "true" : "false");
                if (Delclass == false) { myClass = 'hidden'  };


                            var table = $('#training').DataTable({
                                drawCallback: function () {
                                    $('[data-toggle="popover"]').popover({

                                        html: true,
                                        content: setData,
                                        container: 'body'
                                        //data: setData,


                                    });
                                },
                                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                                colReorder: {
                                    fixedColumnsLeft: 1
                                },
                                stateSave: true,
                                stateSaveParams: function (settings, data) {
                                    for (var i = 0, ien = data.columns.length; i < ien; i++) {
                                        delete data.columns[i].visible;
                                        delete data.columns[i].search;
                                    }
                                },
                                scrollY: '350px',
                                scrollCollapse: true,
                               

                                keys: {
                                    className: 'focus focus-success'
                                },

                                buttons: {
                                    buttons: [
                                        {
                                            extend: 'copyHtml5',
                                            className: myClass,
                                            //className: 'btn btn-light',
                                            title: 'training Data export',
                                            exportOptions: {
                                                columns: ':visible :not(.not-export-column)'
                                            },
                                        },
                                        {
                                            extend: 'excelHtml5',
                                            className: myClass,
                                            //className: 'btn btn-light',
                                            title: 'training Data export',
                                            exportOptions: {
                                                columns: ':visible :not(.not-export-column)'
                                            },

                                        },
                                        {
                                            extend: 'pdfHtml5',
                                            className: myClass,
                                            //className: 'btn btn-light',
                                            title: 'training Data export',
                                            exportOptions: {
                                                columns: ':visible :not(.not-export-column)'
                                            },
                                        },
                                        {
                                            extend: 'csvHtml5',
                                            className: myClass,
                                            //className: 'btn btn-light',
                                            title: 'training Data export',
                                            exportOptions: {
                                                columns: ':visible :not(.not-export-column)'
                                            },
                                        },
                                        {
                                            extend: 'print',
                                            className: myClass,
                                            //className: 'btn btn-light',
                                            title: 'training Data export',
                                            exportOptions: {
                                                columns: ':visible :not(.not-export-column)'
                                            },
                                        },

                                        {
                                            extend: 'colvis',
                                            text: '<i class="icon-three-bars"></i>',
                                            className: 'btn bg-blue btn-icon dropdown-toggle',
                                            columns: ':visible:not(.not-export-column)'
                                        }
                                    ]
                                }
                            });
                            // Adjust columns on window resize
                            setTimeout(function () {
                                $(window).on('resize', function () {
                                    table.columns.adjust();
                                });
                            }, 100);


                            //Redraw table on click toggle. -------table.columns.adjust doesn't work properly upon calling after toggle (width increase/decrease = redraw table.).
                            $('.sidebar-control').on('click', function () {

                                setTimeout(function () {
                                    //alert("gii");

                                    table.columns.adjust().draw();
                                    $("#training").resize();
                                }, 100);

                            });
                            //}

                            $('#training').on('page.dt', function () {
                                //table.draw();
                                //alert("zzz1");
                                $("#training").resize();

                            });

                            $('#training').on('column-visibility.dt', function () {
                                //table.draw();
                                //alert("zzz2");
                                $("#training").resize();

                            });

                            $('#training').on('order.dt', function () {
                                //table.draw();
                                //alert("zzz3");
                                $("#training").resize();

                            });


                            $('#training').on('responsive-display.dt', function () {
                                //table.draw();
                                //alert("zzz4");
                                $("#training").resize();

                            });


                            $('#training').on('responsive-resize.dt', function () {
                                //table.draw();
                                //alert("zzz4");
                                $("#training").resize();

                            });


                            //.on('order.dt', function () {
                            //    table.columns.adjust().draw();
                            //    $("#qhse").resize(); })
                            //.on('search.dt', function () {
                            //    table.columns.adjust().draw();
                            //    $("#qhse").resize(); })

                            //.on('column-visibility.dt', function () {
                            //    table.columns.adjust().draw();
                            //    $("#qhse").resize();
                            //})



                        };






                        // Select2 for length menu styling
                        var _componentSelect2 = function () {
                            if (!$().select2) {
                                console.warn('Warning - select2.min.js is not loaded.');
                                return;
                            }

                            // Initialize
                            $('.dataTables_length select').select2({
                                minimumResultsForSearch: Infinity,
                                dropdownAutoWidth: true,
                                width: 'auto'
                            });
                        };


                        //
                        // Return objects assigned to module
                        //

                        return {
                            init: function () {
                                _componentDatatableBasic();
                                _componentSelect2();
                            }
                        }
                    }();


                    // Initialize module
                    // ------------------------------

                    document.addEventListener('DOMContentLoaded', function () {
                        training.init();
                    });


                </script>

            }