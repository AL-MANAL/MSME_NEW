@model ISOStd.Models.TrainingPlanModels
@using System.Data;

@{
    ViewBag.Title = "";
    ISOStd.Models.clsGlobal ObjGlobal = new ISOStd.Models.clsGlobal();
    string user = ObjGlobal.GetCurrentUserSession().empid;
    DataSet dsCert = new DataSet();
    dsCert = ViewBag.Cert;
}

@section featured {
    <div class="page-header page-header-light">
        <div class="page-header-content header-elements-md-inline">
            <div class="page-title d-flex">
                <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>
            </div>
        </div>
        <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
            <div class="d-flex">
                <div class="breadcrumb">
                    <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item"> Home</span>
                    </a>
                    <a href="@Url.Action("TrainingPlanList", "TrainingPlan", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item">Training Plan List</span>
                    </a>
                    <span class="breadcrumb-item active">Training Plan Detail</span>
                </div>

            </div>

        </div>
    </div>
}


<div class="card">
    <div class="card-header header-elements-inline bg-primary">
        <h5 class="card-title">Training Plan Detail</h5>
        <div class="header-elements">
            <div class="list-icons">
                <a class="list-icons-item" data-action="collapse"></a>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="container-fluid">
            <table class="table table-dark table-bordered table-striped table-hover bg-blue-800">
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.ref_no)
                        </p>
                    </td>
                    <td class="col-xs-3 col-md-4">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.ref_no)
                        </p>
                    </td>

                   

                </tr>
                 <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.division)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.division)
                        </p>
                    </td>

                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.department)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.department)
                        </p>
                    </td>

                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <div class="editor-label">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.LabelFor(model => model.location)
                            </p>
                        </div>
                    </td>
                    <td class="col">
                        <div class="editor-field">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.location)
                            </p>
                        </div>
                    </td>
                    <td class="col-xs-3 col-md-2">
                        <div class="editor-label">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.topic)
                            </p>
                        </div>
                    </td>
                    <td class="col">
                        <div class="editor-field">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.topic)
                            </p>
                        </div>
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <div class="editor-label">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.emp_id)
                            </p>
                        </div>
                    </td>
                    <td class="col-xs-3 col-md-4">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.emp_id)
                        </p>
                    </td>
                </tr>
            </table>
           
                <table class="table table-dark table-bordered table-striped table-hover bg-blue-800">
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                Training duration From Date
                            </p>
                        </td>
                        <td class="col">
                            @if (Model.from_date > Convert.ToDateTime("01/01/0001"))
                            {
                                <p class="bg-dark py-1 px-2 rounded">
                                    @Model.from_date.ToString("dd/MM/yyyy")
                                </p>
                            }
                        </td>
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                Training duration To Date
                            </p>
                        </td>
                        <td class="col">
                            @if (Model.to_date > Convert.ToDateTime("01/01/0001"))
                            {
                                <p class="bg-dark py-1 px-2 rounded">
                                    @Model.to_date.ToString("dd/MM/yyyy")
                                </p>
                            }
                        </td>
                    </tr>
                </table>
            
            <table class="table table-dark table-bordered table-striped table-hover bg-blue-800">
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <div class="editor-label">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.source_id)
                            </p>
                        </div>
                    </td>
                    <td class="col">
                        <div class="editor-field">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.source_id)
                            </p>
                        </div>
                    </td>
                    <td class="col-xs-3 col-md-2">
                        <div class="editor-label">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.trainer_name)
                            </p>
                        </div>
                    </td>
                    <td class="col">
                        <div class="editor-field">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.trainer_name)
                            </p>
                        </div>
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.ext_entity)
                        </p>
                    </td>
                    <td class="col-xs-3 col-md-4">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.ext_entity)
                        </p>
                    </td>
                    @if (Model.approval_status_id == "0")
                    {
                  
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.reviewed_by)
                            </p>
                        </td>
                        <td class="col-xs-3 col-md-4">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.reviewed_by)
                            </p>
                        </td>
                    }
                </tr>
               
                @if (Model.approval_status_id == "0" || Model.approval_status_id == "2")
                {
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.approved_by)
                            </p>
                        </td>
                        <td class="col-xs-3 col-md-4">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.approved_by)
                            </p>
                        </td>
                    </tr>
                }
                @if (Model.approval_status_id == "1" || Model.approval_status_id == "2" || Model.approval_status_id == "3" || Model.approval_status_id == "4")
                {
                    <tr class="row">
                        <td class="col-md-12">Reviewer Details</td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                Reviewed By
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.reviewed_by)
                            </p>
                        </td>
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.review_status)
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.review_status)
                            </p>
                        </td>


                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.reviewed_date)
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @if (Model.reviewed_date != null && Model.reviewed_date > Convert.ToDateTime("01/01/0001"))
                                    {
                                    @Html.Label(Model.reviewed_date.ToString("dd/MM/yyyy hh:mm:ss"))
                                    }
                            </p>
                        </td>
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.reviewer_comments)
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.reviewer_comments)
                            </p>
                        </td>
                    </tr>

                }
                @if (Model.approval_status_id == "3" || Model.approval_status_id == "4")
                {
                    <tr class="row">
                        <td class="col-md-12">Approver Details</td>
                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                Approved By
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.approved_by)
                            </p>
                        </td>
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.approval_status)
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.approval_status)
                            </p>
                        </td>


                    </tr>
                    <tr class="row">
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.approved_date)
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @if (Model.approved_date != null && Model.approved_date > Convert.ToDateTime("01/01/0001"))
                                {
                                @Html.Label(Model.approved_date.ToString("dd/MM/yyyy hh:mm:ss"))
                                }
                            </p>
                        </td>
                        <td class="col-xs-3 col-md-2">
                            <p class="bg-brown py-1 px-2 rounded">
                                @Html.DisplayNameFor(model => model.approver_comments)
                            </p>
                        </td>
                        <td class="col">
                            <p class="bg-dark py-1 px-2 rounded">
                                @Html.DisplayFor(model => model.approver_comments)
                            </p>
                        </td>
                    </tr>

                }
                <tr class="row">
                    <td class="col-md-12">Training Status</td>
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.status_updated_date)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @if (Model.status_updated_date != null && Model.status_updated_date > Convert.ToDateTime("01/01/0001"))
                            {
                                @Html.Label(Model.status_updated_date.ToString("dd/MM/yyyy"))
                            }
                        </p>
                    </td>
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.training_status)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.training_status)
                        </p>
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.training_start_date)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @if (Model.training_start_date != null && Model.training_start_date > Convert.ToDateTime("01/01/0001"))
                            {
                                @Html.Label(Model.training_start_date.ToString("dd/MM/yyyy"))
                            }
                        </p>
                    </td>
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.training_completed_date)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @if (Model.training_completed_date != null && Model.training_completed_date > Convert.ToDateTime("01/01/0001"))
                            {
                                @Html.Label(Model.training_completed_date.ToString("dd/MM/yyyy"))
                            }
                        </p>
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.upload)
                        </p>
                    </td>
                    <td class="col">
                      
                            @if (Model.upload != null && Model.upload != "" && Model.upload.Length > 0)
                            {
                                foreach (var docs in Model.upload.Trim(',').Split(','))
                                {
                                <p style="margin: 0px;" class="py-1 px-2 rounded">
                                    <span class="bg-dark py-1 px-2 rounded">
                                        <a href='@Url.Action("DisplayDocument", "Reports", new { Document = docs})' target="_blank">Preview</a>
                                    </span>
                                </p>
                                }
                            }
                        
                    </td>
                 
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.reshedule_from_date)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @if (Model.reshedule_from_date != null && Model.reshedule_from_date > Convert.ToDateTime("01/01/0001"))
                            {
                                @Html.Label(Model.reshedule_from_date.ToString("dd/MM/yyyy"))
                            }
                        </p>
                    </td>
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.reshedule_to_date)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @if (Model.reshedule_to_date != null && Model.reshedule_to_date > Convert.ToDateTime("01/01/0001"))
                            {
                                @Html.Label(Model.reshedule_to_date.ToString("dd/MM/yyyy"))
                            }
                        </p>
                    </td>
                </tr>
                <tr class="row">
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.reason_reschedule)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.reason_reschedule)
                        </p>
                    </td>
                    <td class="col-xs-3 col-md-2">
                        <p class="bg-brown py-1 px-2 rounded">
                            @Html.DisplayNameFor(model => model.reason_cancell)
                        </p>
                    </td>
                    <td class="col">
                        <p class="bg-dark py-1 px-2 rounded">
                            @Html.DisplayFor(model => model.reason_cancell)
                        </p>
                    </td>
                </tr>
            </table>
           
            @if (dsCert != null && dsCert.Tables.Count > 0 && dsCert.Tables[0].Rows.Count > 0)
            {
                <br />
                <h2 class="bg-dark pl-sm-2">Training Certificate</h2>
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped table-hover datatable-responsive" id="table1">
                            <thead>
                                <tr class="bg-brown">

                                    <th>Sl No</th>
                                    <th>Employee Name</th>
                                    <th>Certificate</th>
                                    <th>Certificate Expiry Date</th>
                                    <th>Certificate Updated On</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0, j = 1; i < dsCert.Tables[0].Rows.Count; i++, j++)
                                {
                                    <tr>
                                        <td>
                                            @j
                                        </td>
                                        <td>
                                            @ObjGlobal.GetEmpHrNameById(dsCert.Tables[0].Rows[i]["emp_id"].ToString())
                                        </td>
                                        <td>
                                            @if (dsCert.Tables[0].Rows[i]["certificate"].ToString() != null && dsCert.Tables[0].Rows[i]["certificate"].ToString() != "" && dsCert.Tables[0].Rows[i]["certificate"].ToString().Length > 0)
                                            {
                                                foreach (var docs in dsCert.Tables[0].Rows[i]["certificate"].ToString().Trim(',').Split(','))
                                                {
                                                    <p style="margin: 0px;" class="py-1 px-2 rounded">
                                                        <span class="py-1 px-2 rounded">
                                                            <a href='@Url.Action("DisplayDocument", "Reports", new { Document = docs})' target="_blank">Preview</a>
                                                        </span>
                                                    </p>
                                                }
                                            }
                                        </td>
                                        <td>

                                            @if (dsCert.Tables[0].Rows[i]["expiry_date"].ToString() != "" && dsCert.Tables[0].Rows[i]["expiry_date"].ToString() != null)
                                            {
                                                @Convert.ToDateTime(dsCert.Tables[0].Rows[i]["expiry_date"].ToString()).ToString("dd/MM/yyyy")
                                            }
                                        </td>
                                        <td>

                                            @if (dsCert.Tables[0].Rows[i]["updated_date"].ToString() != "" && dsCert.Tables[0].Rows[i]["updated_date"].ToString() != null)
                                            {
                                                @Convert.ToDateTime(dsCert.Tables[0].Rows[i]["updated_date"].ToString()).ToString("dd/MM/yyyy")
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>



                    </div>
            }
             <br />
            @if (Model.approval_status_id == "0" && Model.reviewed_by_id.Split(',').Contains(user))
            {
                using (Html.BeginForm("TrainingPlanReview", "TrainingPlan", FormMethod.Post,
                                     new { enctype = "multipart/form-data", id = "form1", name = "form1" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <input type="hidden" id="id_training_plan" name="id_training_plan" value="@Model.id_training_plan" />
                        <table class="table table-dark table-bordered table-striped table-hover bg-blue-800">
                            <tr class="row">
                                <td class="col-xs-3 col-md-2">
                                    <p class="bg-brown py-1 px-2 rounded">
                                        Review/Reject <text style="color:red;">*</text>
                                    </p>
                                </td>
                                <td class="col">
                                    <p class="bg-dark py-1 px-2 rounded">
                                        <label><input type="radio" id="approval_status" name="approval_status" value="2" required onchange="ReviewRequired()" />Reviewed</label>
                                        <label><input type="radio" id="approval_status" name="approval_status" value="1" required onchange="ReviewRequired()" />Rejected</label>
                                    </p>
                                </td>

                                <td class="col-xs-3 col-md-2">
                                    <p class="bg-brown py-1 px-2 rounded">
                                        Comments
                                    </p>
                                </td>
                                <td class="col">
                                    <div class="bg-dark py-1 px-2 rounded">
                                        <textarea maxlength="2000" placeholder="Textarea" style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 96px;" rows="4" cols="4" class="form-control elastic maxlength-badge-position" id="reviewer_comments" name="reviewer_comments"></textarea>
                                    </div>
                                </td>
                            </tr>
                         
                        </table>
                        <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                            <button type="submit" id="btnCreate" value="Submit" class="btn bg-indigo-400" onclick="ProgressIconFunction('#form1')"><i class="icon-checkmark3 mr-2"></i> Submit</button>
                        </div>
                }
            }
            <br />
            @if (Model.approval_status_id == "2" && Model.approved_by_id.Split(',').Contains(user))
            {
                using (Html.BeginForm("TrainingPlanApprove", "TrainingPlan", FormMethod.Post,
                                     new { enctype = "multipart/form-data", id = "form1", name = "form1" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <input type="hidden" id="id_training_plan" name="id_training_plan" value="@Model.id_training_plan" />
                    <table class="table table-dark table-bordered table-striped table-hover bg-blue-800">
                        <tr class="row">
                            <td class="col-xs-3 col-md-2">
                                <p class="bg-brown py-1 px-2 rounded">
                                    Approve/Reject <text style="color:red;">*</text>
                                </p>
                            </td>
                            <td class="col">
                                <p class="bg-dark py-1 px-2 rounded">
                                    <label><input type="radio" id="approval_status" name="approval_status" value="4" required onchange="ApproveRequired()" />Approve</label>
                                    <label><input type="radio" id="approval_status" name="approval_status" value="3" required onchange="ApproveRequired()" />Rejected</label>
                                </p>
                            </td>

                            <td class="col-xs-3 col-md-2">
                                <p class="bg-brown py-1 px-2 rounded">
                                    Comments
                                </p>
                            </td>
                            <td class="col">
                                <div class="bg-dark py-1 px-2 rounded">
                                    <textarea maxlength="2000" placeholder="Textarea" style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 96px;" rows="4" cols="4" class="form-control elastic maxlength-badge-position" id="approver_comments" name="approver_comments"></textarea>
                                </div>
                            </td>
                        </tr>

                    </table>
                        <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                            <button type="submit" id="btnCreate" value="Submit" class="btn bg-indigo-400" onclick="ProgressIconFunction('#form1')"><i class="icon-checkmark3 mr-2"></i> Submit</button>
                        </div>
                }
            }
        </div>

    </div>
</div>



@section Scripts {
    <script>

        function ReviewRequired() {
            var doc_status = $("input[type='radio'][id='approval_status']:checked").val();
            if (doc_status == "1") {
                $("#reviewer_comments").attr('required', true);
            }
            else {
                $("#reviewer_comments").attr('required', false);
            }
        }
        function ApproveRequired() {
            var doc_status = $("input[type='radio'][id='approval_status']:checked").val();
            if (doc_status == "3") {
                $("#approver_comments").attr('required', true);
            }
            else {
                $("#approver_comments").attr('required', false);
            }
        }
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}