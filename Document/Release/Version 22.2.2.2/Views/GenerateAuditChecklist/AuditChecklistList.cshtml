@model List<ISOStd.Models.GenerateAuditChecklistModels>

@{
    ViewBag.Title = "AuditChecklist";
    ISOStd.Models.clsGlobal Obj = new ISOStd.Models.clsGlobal();
}
               @{

                   var ShowEdit = Obj.GetCurrentUserSession().AuditChecklist.Contains("3") ? true : false;
                   var ShowDownld = Obj.GetCurrentUserSession().AuditChecklist.Contains("4") ? true : false;
                   var ShowDel = Obj.GetCurrentUserSession().AuditChecklist.Contains("5") ? true : false;

               }
@section featured {

    <div class="page-header page-header-light">

        <div class="page-header-content header-elements-md-inline">
            <div class="page-title d-flex">
                <h4> <span class="font-weight-semibold">MSME - Management System Made Easy</span></h4>

            </div>


        </div>

        <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
            <div class="d-flex">
                <div class="breadcrumb">

                    <a href="@Url.Action("Index", "Home", null)" class="breadcrumb-item">
                        <span class="breadcrumb-item"> Home</span>
                    </a>

                    <span class="breadcrumb-item active"> Audit Checklists</span>
                </div>

               
            </div>

           
        </div>
    </div>
}

<style>
    .hidden {
        display: none !important;
    }
</style>

<div class="card">
    <div class="card-header header-elements-inline bg-primary">
        <h5 class="card-title">Audit Checklists</h5>
        <div class="header-elements">
            <div class="list-icons">
                <a class="list-icons-item" data-action="collapse"></a>

            </div>
        </div>
    </div>
    @if (Obj.GetCurrentUserSession().AuditChecklist.Contains("3"))
    {
        <div class="card-header bg-white header-elements-sm-inline">

            <div class="header-elements">   

                @*@Html.ActionLink("Audit Questions", "AddAuditElements", null, new { @class = "btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400", onclick = "HyperLinkProgressIconFunction()" })*@
                @Html.ActionLink("Add New", "GenerateAuditChecklist", null, new { @class = "btn btn-outline bg-indigo-400 text-indigo-400 border-indigo-400 ml-3", onclick = "HyperLinkProgressIconFunction()" })

            </div>
        </div>
    }
    <div class="card-body">
        <div class="options d-flex flex-fill">
            @using (Html.BeginForm("AuditChecklistList", "GenerateAuditChecklist", FormMethod.Post, new { id = "form1", name = "form1", style = "width:25%" }))
            {
                if (ViewBag.Branch != null)
                {
                    <select class="form-control select-search select2-hidden-accessible" data-fouc id="branch_name" name="branch_name" onchange="getDetails()">
                        @*<option value='' hidden>Division</option>*@
                        @if (ViewBag.Branch != null)
                        {
                            foreach (var item in ViewBag.Branch)
                            {
                                if (item.Value == ViewBag.Branch_name)
                                {
                                    <option value='@item.Value' selected>@item.Text</option>
                                }
                                else
                                {
                                    <option value='@item.Value'>@item.Text</option>
                                }
                            }
                        }
                    </select>
                }
            }
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-striped table-hover datatable-responsive" id="table1">
            <thead>
                <tr>
                    <th>Sr. No</th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().ChecklistRef)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().created_on)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().branch)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().dept_name)
                    </th>
                    @*<th>
                        @Html.DisplayNameFor(model => model.First().team)
                    </th>*@
                    <th>
                        @Html.DisplayNameFor(model => model.First().notified_to)
                    </th>
                    <th data-priority="2" class="text-center not-export-column">Actions</th>

                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Count() > 0)
                {
                    int i = 0;
                    foreach (var item in Model)
                    {
                        i = i + 1;
                <tr>
                    <td>
                       @i
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ChecklistRef)
                    </td>
                    <td>
                        @*@Html.DisplayFor(modelItem => item.created_on)*@
                        @if (item.created_on != null && item.created_on > Convert.ToDateTime("01/01/0001"))
                        {
                            //item.created_on.ToString("yyyy/MM/dd")
                            @Html.Label(item.created_on.ToString("dd/MM/yyyy"))
                        }
                    </td>
                    <td>
                        @if (item.branch_common == "common")
                        {
                            @Html.DisplayFor(modelItem => item.branch_common)
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.branch)
                        }
                    </td>
                    <td>
                        @if (item.dept_name_common == "common")
                        {
                            @Html.DisplayFor(modelItem => item.dept_name_common)
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.dept_name)
                        }
                    </td>
                    @*<td>
                        @if (item.team_common == "common")
                        {
                            @Html.DisplayFor(modelItem => item.team_common)
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.team)
                        }
                    </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.notified_to)
                    </td>
                    <td class="text-center">
                        <div class="list-icons">
                            <div class="list-icons-item dropdown">
                                <a href="#" class="list-icons-item caret-0 dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-gear mr-2"></i>
                                </a>

                                <div class="dropdown-menu dropdown-menu-right">
                                    <a class="dropdown-item" href='@Url.Action("AuditChecklistDetails", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist })' title="" onclick="HyperLinkProgressIconFunction()">
                                        <i class="icon-pencil7"></i>View
                                    </a>
                                    @if (ShowEdit)
                                    {
                                        <a class="dropdown-item" href='@Url.Action("AuditChecklistEdit", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist })' title="Edit Audit Checklist" onclick="HyperLinkProgressIconFunction()">
                                            <i class="icon-pencil7"></i>Edit
                                        </a>
                                    }
                                    @*<a class="dropdown-item" href='@Url.Action("PerformAudit", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist })' title="Perform Audit" onclick="HyperLinkProgressIconFunction()">

                            <i class="icon-person"></i>Perform Audit
                        </a>
                        <a class="dropdown-item" href='@Url.Action("AuditList", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist  })' title="Audit checklist Details" onclick="HyperLinkProgressIconFunction()">
                            <i class="icon-list3"></i>Audit Checklist Details
                        </a>
                        <div class="dropdown-divider"></div>*@
                                    @if (ShowDel)
                                    {

                                        <span class="dropdown-item text-center" title="Delete" onclick="DeleteItems(@item.id_AuditChecklist)" style="cursor:pointer;"><i class="icon-bin"></i>Delete</span>
                                    }

                                </div>
                            </div>
                        </div>
                    </td>



                    @*<td>

            <a href='@Url.Action("AuditChecklistEdit", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist })' title="Edit Audit Checklist" onclick="HyperLinkProgressIconFunction()">
                <center> <span class="badge badge-info">Edit</span></center>
            </a>

        </td>

        <td>
            <a href='@Url.Action("PerformAudit", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist })' title="Perform Audit" onclick="HyperLinkProgressIconFunction()">

                <center><i class="icon-person fa-lg"></i></center>
            </a>

        </td>
        <td>
            <a href='@Url.Action("AuditList", "GenerateAuditChecklist", new { id_AuditChecklist = item.id_AuditChecklist  })' title="Audit checklist Details" onclick="HyperLinkProgressIconFunction()">
                <center><i class="icon-list3"></i></center>
            </a>
        </td>
            <td>
                <center> <span class="badge badge-danger" title="Delete Checklist" onclick="DeleteItems(@item.id_AuditChecklist)" style="cursor:pointer;">Delete</span></center>
            </td>*@



                </tr>
                    }
                }

            </tbody>
        </table>
    </div>

</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

       $(document).ready(function () {

        @if (TempData["alertdata"] != null ) {

           @: new Noty({
           @:     text: '@TempData["alertdata"]',
           @:     type: 'error'
           @: }).show();
        }

        @if (@TempData["Successdata"] != null ) {

        @:    new Noty({
         @:       text: '@TempData["Successdata"]',
         @:       type: 'success'
         @:   }).show();
        }
            });
        function setData(id) {

                var set_data = '';
                var element = $(this);
                var id = element.attr("id");
                $.ajax({
                     url: '@Url.Action("AuditChecklistInfo", "GenerateAuditChecklist")',
                    methos: "post",
                    async: false,
                    data: { id: id },
                    success: function (data) {
                        set_data = data;
                    }

                });

                return set_data;
            }
            var table1 = function () {

              @*var ShowEdit = @(Obj.GetCurrentUserSession().AuditChecklist.Contains("3") ? "true" : "false");
                 var ShowDel = @(Obj.GetCurrentUserSession().AuditChecklist.Contains("5") ? "true" : "false");*@

                // Basic Datatable examples
                var _componentDatatableBasic = function () {
                    if (!$().DataTable) {
                        console.warn('Warning - datatables.min.js is not loaded.');
                        return;
                    }

                    //Setting datatable defaults
                    $.extend($.fn.dataTable.defaults, {
                        autoWidth: false,
                        responsive: true,
                        columnDefs: [{
                            orderable: false,
                            //width: 100,
                            targets: 'not-export-column'

                        }],
                        responsivePriority: 2, targets: -1,
                        colReorder: false,
                        dom: '<"datatable-header"fBl><"datatable-scroll-wrap"t><"datatable-footer"ip>',
                        //dom: 'lBfrtip',
                        language: {
                            search: '<span>Filter:</span> _INPUT_',
                            searchPlaceholder: 'Type to filter...',
                            lengthMenu: '<span>Show:</span> _MENU_',
                            paginate: { 'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;' }
                        }
                    });

               var myClass = "";
                var Delclass= @(Obj.GetCurrentUserSession().AuditChecklist.Contains("4") ? "true" : "false");
                if (Delclass == false) { myClass = 'hidden'  };

                    var table1 = $('#table1').DataTable({
                        drawCallback: function () {

                            $('[data-toggle="popover"]').popover({
                                html: true,
                                content: setData,
                                container: 'body'
                                //data: setData,
                            });
                            var dropdownMenu;

                            // and when you show it, move it to the body
                            $('.datatable-responsive').on('show.bs.dropdown', function (e) {

                                // grab the menu
                                dropdownMenu = $(e.target).find('.dropdown-menu');

                                // detach it and append it to the body
                                $('body').append(dropdownMenu.detach());

                                // grab the new offset position
                                var eOffset = $(e.target).offset();

                                // make sure to place it where it would normally go (this could be improved)
                                dropdownMenu.css({
                                    'display': 'block',
                                    'top': eOffset.top + $(e.target).outerHeight(),
                                    'left': eOffset.left
                                });
                            });

                            // and when you hide it, reattach the drop down, and hide it normally
                            $('.datatable-responsive').on('hide.bs.dropdown', function (e) {
                                $(e.target).append(dropdownMenu.detach());
                                dropdownMenu.hide();
                            });
                        },
                        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
                        colReorder: {
                            fixedColumnsLeft: 1
                        },
                        stateSave: true,
                        //stateSaveParams: function (settings, data) {
                        //    for (var i = 0, ien = data.columns.length; i < ien; i++) {
                        //        delete data.columns[i].visible;
                        //        delete data.columns[i].search;
                        //    }
                        //},
                        //scrollY: '350px',
                        scrollCollapse: true,


                        keys: {
                            className: 'focus focus-success'
                        },

                        buttons: {
                            buttons: [
                                {
                                    extend: 'colvis',
                                    text: '<i class="icon-three-bars"></i>',
                                    className: 'btn bg-blue btn-icon dropdown-toggle',
                                    columns: ':visible:not(.not-export-column)'
                                }
                            ]
                        }
                    });
                    // Adjust columns on window resize
                    setTimeout(function () {
                        $(window).on('resize', function () {
                            table1.columns.adjust();
                        });
                    }, 100);


                    //Redraw table on click toggle. -------table.columns.adjust doesn't work properly upon calling after toggle (width increase/decrease = redraw table.).
                    $('.sidebar-control').on('click', function () {

                        setTimeout(function () {
                            //alert("gii");

                            table.columns.adjust().draw();
                            $("#table1").resize();
                        }, 100);

                    });
                    //}

                    $('#table1').on('page.dt', function () {
                        //table.draw();
                        //alert("zzz1");
                        $("#table1").resize();

                    });

                    $('#table1').on('column-visibility.dt', function () {
                        //table.draw();
                        //alert("zzz2");
                        $("#table1").resize();

                    });

                    $('#table1').on('order.dt', function () {
                        //table.draw();
                        //alert("zzz3");
                        $("#table1").resize();

                    });


                    $('#table1').on('responsive-display.dt', function () {
                        //table.draw();
                        //alert("zzz4");
                        $("#table1").resize();

                    });


                    $('#table1').on('responsive-resize.dt', function () {
                        //table.draw();
                        //alert("zzz4");
                        $("#table1").resize();

                    });


                    //.on('order.dt', function () {
                    //    table.columns.adjust().draw();
                    //    $("#qhse").resize(); })
                    //.on('search.dt', function () {
                    //    table.columns.adjust().draw();
                    //    $("#qhse").resize(); })

                    //.on('column-visibility.dt', function () {
                    //    table.columns.adjust().draw();
                    //    $("#qhse").resize();
                    //})
                };

                // Select2 for length menu styling
                var _componentSelect2 = function () {
                    if (!$().select2) {
                        console.warn('Warning - select2.min.js is not loaded.');
                        return;
                    }

                    // Initialize
                    $('.dataTables_length select').select2({
                        minimumResultsForSearch: Infinity,
                        dropdownAutoWidth: true,
                        width: 'auto'
                    });
                };


                //
                // Return objects assigned to module
                //

                return {
                    init: function () {
                        _componentDatatableBasic();
                        _componentSelect2();
                    }
                }
            }();


            // Initialize module
            // ------------------------------

            document.addEventListener('DOMContentLoaded', function () {
                table1.init();
            });

            function DeleteItems(id_AuditChecklist) {
            bootbox.confirm({
                title: 'Confirm dialog',
                message: 'Are you Sure you want to Delete the current Record?',
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-primary'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-link'
                    }
                },
                callback: function (r) {
                    if (r == true) {
                     jQuery.ajax({
                        url: '@Url.Action("AuditChecklistDocDelete", "GenerateAuditChecklist")',
                        type: 'POST',
                        dataType: "json",
                        data: { 'id_AuditChecklist': id_AuditChecklist },
                        success: function (result) {
                            var params = {
                                View: 1
                            };
                            //// Add new params to the querystring dictionary

                            window.location.href =
                                window.location.protocol + "//" +
                                window.location.host +
                                window.location.pathname
                        }
                    });
                    return true;
                }
                else if (r == false) {
                        bootbox.hideAll();
                        return false;
                    }

                }
            });
        }

         function getDetails() {
                var branch_name = document.getElementById("branch_name").value;
                     var params = {
                                branch_name: branch_name
                            };
                            queryString = $.param(params);

                            window.location.href =
                                window.location.protocol + "//" +
                                window.location.host +
                                window.location.pathname +
                               '?' + queryString;
            }
    </script>

}
